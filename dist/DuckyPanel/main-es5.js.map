{"version":3,"sources":["$_lazy_route_resource lazy namespace object","src/app/app.component.html","src/app/pages/accounts/accounts.component.html","src/app/pages/accounts/components/account-dialog/account-dialog.component.html","src/app/pages/dns/dns.component.html","src/app/pages/domains/components/add-alias-dialog/add-alias-dialog.component.html","src/app/pages/domains/components/add-domain-dialog/add-domain-dialog.component.html","src/app/pages/domains/components/dkim-dialog/dkim-dialog.component.html","src/app/pages/domains/domains.component.html","src/app/pages/forwarders/components/forwarder-dialog/forwarder-dialog.component.html","src/app/pages/forwarders/forwarders.component.html","src/app/pages/login/login.component.html","src/app/pages/profile/profile.component.html","src/app/shared/components/dialog/dialog.component.html","src/app/shared/components/error-snackbar/error-snackbar.component.html","src/app/shared/components/fab-button/fab-button.component.html","node_modules/tslib/tslib.es6.js","src/app/app-routing.module.ts","src/app/app.component.scss","src/app/app.component.ts","src/app/app.module.ts","src/app/pages/accounts/accounts.component.scss","src/app/pages/accounts/accounts.component.ts","src/app/pages/accounts/components/account-dialog/account-dialog.component.scss","src/app/pages/accounts/components/account-dialog/account-dialog.component.ts","src/app/pages/dns/dns.component.scss","src/app/pages/dns/dns.component.ts","src/app/pages/domains/components/add-alias-dialog/add-alias-dialog.component.scss","src/app/pages/domains/components/add-alias-dialog/add-alias-dialog.component.ts","src/app/pages/domains/components/add-domain-dialog/add-domain-dialog.component.scss","src/app/pages/domains/components/add-domain-dialog/add-domain-dialog.component.ts","src/app/pages/domains/components/dkim-dialog/dkim-dialog.component.scss","src/app/pages/domains/components/dkim-dialog/dkim-dialog.component.ts","src/app/pages/domains/domains.component.scss","src/app/pages/domains/domains.component.ts","src/app/pages/domains/domains.service.ts","src/app/pages/forwarders/components/forwarder-dialog/forwarder-dialog.component.scss","src/app/pages/forwarders/components/forwarder-dialog/forwarder-dialog.component.ts","src/app/pages/forwarders/forwarders.component.scss","src/app/pages/forwarders/forwarders.component.ts","src/app/pages/login/login.component.scss","src/app/pages/login/login.component.ts","src/app/pages/profile/profile.component.scss","src/app/pages/profile/profile.component.ts","src/app/pages/profile/profile.service.ts","src/app/shared/components/dialog/dialog.component.scss","src/app/shared/components/dialog/dialog.component.ts","src/app/shared/components/error-snackbar/error-snackbar.component.scss","src/app/shared/components/error-snackbar/error-snackbar.component.ts","src/app/shared/components/error-snackbar/error-snackbar.service.ts","src/app/shared/components/fab-button/fab-button.component.scss","src/app/shared/components/fab-button/fab-button.component.ts","src/app/shared/functions/formatBytes.function.ts","src/app/shared/validators/address-username-validator.directive.ts","src/app/shared/validators/ascii-validator.directive.ts","src/app/shared/validators/forwarding-target-validator.directive.ts","src/app/shared/validators/not-contains-validator.directive.ts","src/environments/environment.ts","src/main.ts"],"names":[],"mappings":"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","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export default \"<mat-sidenav-container class=\\\"sidenav-container\\\">\\n  <mat-sidenav\\n    #drawer\\n    class=\\\"sidenav\\\"\\n    fixedInViewport\\n    [attr.role]=\\\"(isHandset$ | async) ? 'dialog' : 'navigation'\\\"\\n    [mode]=\\\"(isHandset$ | async) ? 'over' : 'side'\\\"\\n    [opened]=\\\"(isHandset$ | async) === false && isFullscreen === false\\\"\\n  >\\n    <!-- Create all navigation items -->\\n    <mat-nav-list>\\n      <div class=\\\"nav-top-part\\\">\\n        <ng-container *ngFor=\\\"let navCategory of navCategories; first as isFirst\\\">\\n          <!-- Only add divider if not the first category in the list -->\\n          <mat-divider *ngIf=\\\"!isFirst\\\"></mat-divider>\\n          <h3 mat-subheader>{{ navCategory.title }}</h3>\\n\\n          <ng-container *ngFor=\\\"let navItem of navCategory.items\\\">\\n            <a\\n              mat-list-item\\n              *ngIf=\\\"navItem.routerLink; else href\\\"\\n              (click)=\\\"closeDrawerConditional()\\\"\\n              [routerLink]=\\\"navItem.routerLink\\\"\\n            >\\n              <mat-icon mat-list-icon>{{ navItem.icon }}</mat-icon>\\n              <h4 mat-line>{{ navItem.name }}</h4>\\n            </a>\\n            <ng-template #href>\\n              <a mat-list-item (click)=\\\"closeDrawerConditional()\\\" [href]=\\\"navItem.href\\\" target=\\\"_blank\\\">\\n                <mat-icon mat-list-icon>{{ navItem.icon }}</mat-icon>\\n                <h4 mat-line>{{ navItem.name }}</h4>\\n                <mat-icon class=\\\"external-link\\\">launch</mat-icon>\\n              </a>\\n            </ng-template>\\n          </ng-container>\\n        </ng-container>\\n      </div>\\n      <a class=\\\"profile-link\\\" mat-list-item (click)=\\\"closeDrawerConditional()\\\" routerLink=\\\"/profile\\\">\\n        <mat-icon mat-list-icon>account_circle</mat-icon>\\n        <h4 mat-line>{{profileService.user.username}}</h4>\\n      </a>\\n    </mat-nav-list>\\n  </mat-sidenav>\\n\\n  <mat-sidenav-content>\\n    <mat-toolbar *ngIf=\\\"isFullscreen === false\\\" color=\\\"primary\\\" [ngStyle]=\\\"{ 'z-index': 100 }\\\">\\n      <button\\n        type=\\\"button\\\"\\n        aria-label=\\\"Toggle sidenav\\\"\\n        mat-icon-button\\n        (click)=\\\"drawer.toggle()\\\"\\n        *ngIf=\\\"isHandset$ | async\\\"\\n      >\\n        <mat-icon aria-label=\\\"Side nav toggle icon\\\">menu</mat-icon>\\n      </button>\\n      <span>{{ title }}</span>\\n    </mat-toolbar>\\n    <div [class.content]=\\\"isFullscreen === false\\\">\\n      <router-outlet></router-outlet>\\n      <!-- This is where the router will add a component based on the url -->\\n    </div>\\n  </mat-sidenav-content>\\n</mat-sidenav-container>\\n\"","export default \"<div fxLayout=\\\"column\\\" fxLayoutGap=\\\"10px\\\">\\n  <mat-card>\\n    <mat-card-title>Your Email Accounts</mat-card-title>\\n    <mat-card-content\\n      >This is an overview of the email accounts you have access to. Here you can also add, edit and delete accounts\\n    </mat-card-content>\\n  </mat-card>\\n  <mat-card class=\\\"account-table-card\\\">\\n    <ng-template #loading>\\n      <td-loading-mask width=\\\"100%\\\" height=\\\"56px\\\"></td-loading-mask>\\n      <td-loading-mask width=\\\"100%\\\" height=\\\"48px\\\"></td-loading-mask>\\n      <td-loading-mask width=\\\"100%\\\" height=\\\"48px\\\"></td-loading-mask>\\n      <td-loading-mask width=\\\"100%\\\" height=\\\"48px\\\"></td-loading-mask>\\n    </ng-template>\\n\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between\\\">\\n      <mat-form-field appearance=\\\"fill\\\">\\n        <mat-label>Filter</mat-label>\\n        <input matInput type=\\\"search\\\" (keyup)=\\\"applyFilter($event.target.value)\\\" />\\n      </mat-form-field>\\n      <mat-paginator\\n        [pageSizeOptions]=\\\"[10, 25, 50, 100, 200, 300, 400, 500]\\\"\\n        pageSize=\\\"50\\\"\\n        showFirstLastButtons\\n      ></mat-paginator>\\n    </div>\\n    <ng-container *ngIf=\\\"accountSubscription.closed; else loading\\\">\\n      <mat-table [dataSource]=\\\"dataSource\\\" matSort>\\n        <ng-container matColumnDef=\\\"name\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header> Name </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let row\\\" data-label=\\\"name\\\"> {{ row.name }} </mat-cell>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"address\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header> Address </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let row\\\" data-label=\\\"address\\\"> {{ row.address }} </mat-cell>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"quotaUsedFormatted\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header arrowPosition=\\\"before\\\"> Used </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let row\\\" data-label=\\\"quotaUsedFormatted\\\"> {{ row.quotaUsedFormatted }} </mat-cell>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"quotaAllowedFormatted\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header> Quota </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let row\\\" data-label=\\\"quotaAllowedFormatted\\\">\\n            {{ row.quotaAllowedFormatted }}\\n          </mat-cell>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"actions\\\">\\n          <mat-header-cell *matHeaderCellDef> Actions </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let row\\\" data-label=\\\"actions\\\">\\n            <button\\n              [routerLink]=\\\"['/accounts', row.id]\\\"\\n              matTooltip=\\\"Modify account\\\"\\n              matTooltipPosition=\\\"left\\\"\\n              matTooltipShowDelay=\\\"500\\\"\\n              mat-icon-button\\n              aria-label=\\\"Modify account\\\"\\n            >\\n              <mat-icon>edit</mat-icon>\\n            </button>\\n            <button\\n              (click)=\\\"removeConfirmDialog(row.id, row.address)\\\"\\n              matTooltip=\\\"Remove this account\\\"\\n              matTooltipPosition=\\\"left\\\"\\n              matTooltipShowDelay=\\\"500\\\"\\n              mat-icon-button\\n              aria-label=\\\"Remove this account\\\"\\n            >\\n              <mat-icon>delete</mat-icon>\\n            </button>\\n          </mat-cell>\\n        </ng-container>\\n\\n        <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n        <mat-row *matRowDef=\\\"let row; columns: displayedColumns\\\"> </mat-row>\\n      </mat-table>\\n    </ng-container>\\n  </mat-card>\\n</div>\\n<app-fab-button (click)=\\\"accountDialog()\\\" icon=\\\"add\\\"></app-fab-button>\\n\"","export default \"<h2 mat-dialog-title>{{ isModifyDialog ? 'Modify' : 'New' }} email account</h2>\\n<mat-dialog-content>\\n  <ng-template #loader>\\n    <div class=\\\"loader-container\\\" fxLayout=\\\"column\\\" fxLayoutGap=\\\"calc(10px + 1.34375em)\\\">\\n      <td-loading-mask class=\\\"loading-field\\\" width=\\\"100%\\\" height=\\\"59.5px\\\"></td-loading-mask>\\n      <div [fxLayout]=\\\"(isHandset$ | async) ? 'column' : 'row'\\\" class=\\\"row-container\\\" fxLayoutGap=\\\"10px\\\">\\n        <td-loading-mask class=\\\"loading-field\\\" width=\\\"100%\\\" height=\\\"59.5px\\\"></td-loading-mask>\\n        <div *ngIf=\\\"!(isHandset$ | async)\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\n          @\\n        </div>\\n        <td-loading-mask class=\\\"loading-field\\\" width=\\\"100%\\\" height=\\\"59.5px\\\"></td-loading-mask>\\n      </div>\\n      <td-loading-mask class=\\\"loading-field\\\" width=\\\"100%\\\" height=\\\"59.5px\\\"></td-loading-mask>\\n      <div [fxLayout]=\\\"(isHandset$ | async) ? 'column' : 'row'\\\" fxLayoutGap=\\\"10px\\\" class=\\\"row-container\\\">\\n        <td-loading-mask class=\\\"loading-field\\\" width=\\\"100%\\\" height=\\\"59.5px\\\"></td-loading-mask>\\n        <td-loading-mask class=\\\"loading-field\\\" width=\\\"100%\\\" height=\\\"59.5px\\\"></td-loading-mask>\\n        <td-loading-mask class=\\\"loading-field\\\" width=\\\"100%\\\" height=\\\"59.5px\\\"></td-loading-mask>\\n      </div>\\n      <div [fxLayout]=\\\"(isHandset$ | async) ? 'column' : 'row'\\\" fxLayoutGap=\\\"10px\\\" class=\\\"row-container\\\">\\n        <td-loading-mask class=\\\"loading-field\\\" width=\\\"100%\\\" height=\\\"59.5px\\\"></td-loading-mask>\\n        <td-loading-mask class=\\\"loading-field\\\" width=\\\"100%\\\" height=\\\"59.5px\\\"></td-loading-mask>\\n        <td-loading-mask class=\\\"loading-field\\\" width=\\\"100%\\\" height=\\\"59.5px\\\"></td-loading-mask>\\n      </div>\\n      <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"10px\\\" fxLayoutAlign=\\\"end\\\">\\n        <mat-spinner-button (btnClick)=\\\"dialogRef.close()\\\" [options]=\\\"cancelButtonConfig\\\"></mat-spinner-button>\\n        <td-loading-mask width=\\\"66px\\\" height=\\\"36px\\\"></td-loading-mask>\\n      </div>\\n    </div>\\n  </ng-template>\\n  <ng-container\\n    *ngIf=\\\"\\n      (!isModifyDialog && domainsService.domainsSubscription && domainsService.domainsSubscription.closed) ||\\n        (accountDetailsSubscription && accountDetailsSubscription.closed);\\n      else loader\\n    \\\"\\n  >\\n  <!-- <ng-container *ngIf=\\\"false; else loader\\\"> -->\\n    <form [formGroup]=\\\"accountForm\\\" id=\\\"accountForm\\\" (ngSubmit)=\\\"updateAccount()\\\" fxLayout=\\\"column\\\" fxLayoutGap=\\\"10px\\\">\\n      <mat-form-field appearance=\\\"fill\\\">\\n        <mat-label>Name</mat-label>\\n        <input matInput formControlName=\\\"name\\\" />\\n      </mat-form-field>\\n\\n      <div [fxLayout]=\\\"(isHandset$ | async) ? 'column' : 'row'\\\" class=\\\"row-container\\\" fxLayoutGap=\\\"10px\\\">\\n        <mat-form-field appearance=\\\"fill\\\" [class.user-input-right]=\\\"!(isHandset$ | async)\\\">\\n          <mat-label>User</mat-label>\\n          <input matInput formControlName=\\\"addressUser\\\" [required]=\\\"isModifyDialog ? null : 'required'\\\" />\\n          <mat-error *ngIf=\\\"accountForm.controls['addressUser'].hasError('required')\\\">\\n            User is required\\n          </mat-error>\\n          <mat-error *ngIf=\\\"accountForm.controls['addressUser'].hasError('AddressUsername')\\\">\\n            Invalid email address format\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <div *ngIf=\\\"!(isHandset$ | async)\\\" class=\\\"at-symbol\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\n          @\\n        </div>\\n\\n        <mat-form-field appearance=\\\"fill\\\">\\n          <mat-label>Domain</mat-label>\\n          <span *ngIf=\\\"isHandset$ | async\\\" matPrefix>@</span>\\n          <mat-select formControlName=\\\"domain\\\" [required]=\\\"isModifyDialog ? null : 'required'\\\">\\n            <ng-container *ngFor=\\\"let domain of domainsService.domainsStrings; let i = index\\\">\\n              <mat-option [value]=\\\"domain\\\">{{ domain }}</mat-option>\\n            </ng-container>\\n          </mat-select>\\n          <mat-error *ngIf=\\\"accountForm.controls['domain'].hasError('required')\\\">\\n            Domain is required\\n          </mat-error>\\n        </mat-form-field>\\n      </div>\\n\\n      <mat-form-field appearance=\\\"fill\\\">\\n        <mat-label>Password</mat-label>\\n        <input matInput type=\\\"password\\\" formControlName=\\\"password\\\" [required]=\\\"isModifyDialog ? null : 'required'\\\" />\\n        <mat-error *ngIf=\\\"accountForm.controls['password'].hasError('required')\\\">\\n          Password is required\\n        </mat-error>\\n        <mat-error *ngIf=\\\"accountForm.controls['password'].hasError('minlength')\\\">\\n          Password must be at least 8 characters\\n        </mat-error>\\n      </mat-form-field>\\n\\n      <div [fxLayout]=\\\"(isHandset$ | async) ? 'column' : 'row'\\\" fxLayoutGap=\\\"10px\\\" class=\\\"row-container\\\">\\n        <mat-form-field appearance=\\\"fill\\\">\\n          <mat-label>Spam treshold</mat-label>\\n          <input matInput type=\\\"number\\\" formControlName=\\\"spamLevel\\\" />\\n          <mat-hint>0-100</mat-hint>\\n          <mat-error\\n            *ngIf=\\\"\\n              accountForm.controls['spamLevel'].hasError('min') || accountForm.controls['spamLevel'].hasError('max')\\n            \\\"\\n          >\\n            Treshold must be between 0-100\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <mat-form-field appearance=\\\"fill\\\">\\n          <mat-label>Quota</mat-label>\\n          <input matInput type=\\\"number\\\" formControlName=\\\"quota\\\" />\\n          <span matSuffix>MiB</span>\\n          <mat-hint *ngIf=\\\"isModifyDialog\\\"\\n            >Current usage: {{ math.round(accountDetails.limits.quota.used / math.pow(1024, 2)) }}MiB</mat-hint\\n          >\\n          <mat-error *ngIf=\\\"accountForm.controls['quota'].hasError('min')\\\">\\n            Quota must be above 0\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <mat-form-field appearance=\\\"fill\\\">\\n          <mat-label>Disabled services</mat-label>\\n          <mat-select multiple formControlName=\\\"disabledScopes\\\">\\n            <mat-option value=\\\"smtp\\\">SMTP</mat-option>\\n            <mat-option value=\\\"imap\\\">IMAP</mat-option>\\n            <mat-option value=\\\"pop3\\\">POP3</mat-option>\\n          </mat-select>\\n        </mat-form-field>\\n      </div>\\n\\n      <div [fxLayout]=\\\"(isHandset$ | async) ? 'column' : 'row'\\\" fxLayoutGap=\\\"10px\\\" class=\\\"row-container\\\">\\n        <mat-form-field appearance=\\\"fill\\\">\\n          <mat-label>Send limit</mat-label>\\n          <input matInput type=\\\"number\\\" formControlName=\\\"sendLimit\\\" />\\n          <mat-hint *ngIf=\\\"isModifyDialog\\\">Current usage: {{ accountDetails.limits.send.used }}</mat-hint>\\n          <mat-error\\n            *ngIf=\\\"\\n              accountForm.controls['sendLimit'].hasError('min') || accountForm.controls['sendLimit'].hasError('max')\\n            \\\"\\n          >\\n            Limit must be between 1-300\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <mat-form-field appearance=\\\"fill\\\">\\n          <mat-label>Receive limit</mat-label>\\n          <input matInput type=\\\"number\\\" formControlName=\\\"receiveLimit\\\" />\\n          <mat-hint *ngIf=\\\"isModifyDialog\\\">Current usage: {{ accountDetails.limits.receive.used }}</mat-hint>\\n          <mat-error *ngIf=\\\"accountForm.controls['receiveLimit'].hasError('min')\\\">\\n            Limit must be above 0\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <mat-form-field appearance=\\\"fill\\\">\\n          <mat-label>Forward limit</mat-label>\\n          <input matInput type=\\\"number\\\" formControlName=\\\"forwardLimit\\\" />\\n          <mat-hint *ngIf=\\\"isModifyDialog\\\">Current usage: {{ accountDetails.limits.forward.used }}</mat-hint>\\n          <mat-error\\n            *ngIf=\\\"\\n              accountForm.controls['forwardLimit'].hasError('min') ||\\n              accountForm.controls['forwardLimit'].hasError('max')\\n            \\\"\\n          >\\n            Limit must be between 1-200\\n          </mat-error>\\n        </mat-form-field>\\n      </div>\\n      <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"10px\\\" fxLayoutAlign=\\\"end\\\">\\n        <mat-spinner-button (btnClick)=\\\"dialogRef.close()\\\" [options]=\\\"cancelButtonConfig\\\"></mat-spinner-button>\\n        <div (click)=\\\"forceCheckForm()\\\">\\n          <mat-spinner-button [options]=\\\"saveButtonConfig\\\"></mat-spinner-button>\\n        </div>\\n      </div>\\n    </form>\\n  </ng-container>\\n</mat-dialog-content>\\n\"","export default \"<!-- Switch to row or column mode depending on mobile or not -->\\n<div [fxLayout]=\\\"(isHandset$ | async) ? 'column' : 'row'\\\" fxLayoutGap=\\\"10px\\\">\\n  <ng-template #loading>\\n    <mat-spinner diameter=\\\"50\\\"></mat-spinner>\\n  </ng-template>\\n  <mat-card fxFlex=\\\"30%\\\" [fxFlexAlign]=\\\"(isHandset$ | async) ? null : 'start'\\\">\\n    <mat-card-title>DNS records check</mat-card-title>\\n    <mat-card-content\\n      >Select a domain to view the needed records for it. A check will also be performed to see if you've set the\\n      records correctly.</mat-card-content\\n    >\\n  </mat-card>\\n  <div fxFlex=\\\"70%\\\" fxLayout=\\\"column\\\" fxLayoutGap=\\\"10px\\\">\\n    <form\\n      *ngIf=\\\"domainsService.domainsSubscription && domainsService.domainsSubscription.closed; else loading\\\"\\n      [formGroup]=\\\"domainForm\\\"\\n      id=\\\"domainForm\\\"\\n    >\\n      <mat-form-field appearance=\\\"fill\\\" class=\\\"domain-field\\\">\\n        <mat-label>Domain</mat-label>\\n        <mat-select formControlName=\\\"domain\\\">\\n          <ng-container *ngFor=\\\"let domain of domainsService.domainsAndAliasesStrings; let i = index\\\">\\n            <mat-option [value]=\\\"domain\\\">{{ domain }}</mat-option>\\n          </ng-container>\\n        </mat-select>\\n      </mat-form-field>\\n    </form>\\n    <ng-container *ngIf=\\\"selectedDomain\\\">\\n      <ng-container *ngIf=\\\"dnsCheckSubscription && dnsCheckSubscription.closed; else loading\\\">\\n        <mat-card>\\n          <mat-card-title class=\\\"dns-card-title\\\">Valid records for {{ selectedDomain }}</mat-card-title>\\n          <h5 class=\\\"table-title\\\">MX records</h5>\\n          <mat-table [dataSource]=\\\"correctMxDataSource\\\">\\n            <ng-container matColumnDef=\\\"name\\\">\\n              <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\\n              <mat-cell *matCellDef=\\\"let row\\\" data-label=\\\"name\\\"> {{ selectedDomain }} </mat-cell>\\n            </ng-container>\\n            <ng-container matColumnDef=\\\"server\\\">\\n              <mat-header-cell *matHeaderCellDef> Mail server </mat-header-cell>\\n              <mat-cell *matCellDef=\\\"let row\\\" data-label=\\\"server\\\"> {{ row.exchange }} </mat-cell>\\n            </ng-container>\\n            <ng-container matColumnDef=\\\"priority\\\">\\n              <mat-header-cell *matHeaderCellDef> Priority </mat-header-cell>\\n              <mat-cell *matCellDef=\\\"let row\\\" data-label=\\\"priority\\\"> {{ row.priority }} </mat-cell>\\n            </ng-container>\\n            <mat-header-row *matHeaderRowDef=\\\"correctMxDisplayedColumns\\\"></mat-header-row>\\n            <mat-row *matRowDef=\\\"let row; columns: correctMxDisplayedColumns\\\"></mat-row>\\n          </mat-table>\\n          <h5 class=\\\"table-title\\\">TXT records</h5>\\n          <mat-table [dataSource]=\\\"correctTxtDataSource\\\">\\n            <ng-container matColumnDef=\\\"name\\\">\\n              <mat-header-cell *matHeaderCellDef> Name </mat-header-cell>\\n              <mat-cell *matCellDef=\\\"let row\\\" data-label=\\\"name\\\">\\n                {{\\n                  row.isDkim ? dnsCheck.correctValues.dkim.selector + '._domainkey.' + selectedDomain : selectedDomain\\n                }}\\n              </mat-cell>\\n            </ng-container>\\n            <ng-container matColumnDef=\\\"content\\\">\\n              <mat-header-cell *matHeaderCellDef> Content </mat-header-cell>\\n              <mat-cell *matCellDef=\\\"let row\\\" data-label=\\\"content\\\" [class.dkim-content]=\\\"row.isDkim\\\">\\n                {{ row.content }}\\n              </mat-cell>\\n            </ng-container>\\n            <mat-header-row *matHeaderRowDef=\\\"correctTxtDisplayedColumns\\\"></mat-header-row>\\n            <mat-row *matRowDef=\\\"let row; columns: correctTxtDisplayedColumns\\\"> </mat-row>\\n          </mat-table>\\n        </mat-card>\\n        <mat-card>\\n          <ng-template #noErrors>\\n            <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"10px\\\">\\n              <mat-icon mat-list-icon class=\\\"success-icon\\\">check_circle</mat-icon>\\n              <mat-card-title class=\\\"dns-card-title\\\">DNS config for {{ selectedDomain }} looks valid</mat-card-title>\\n            </div>\\n          </ng-template>\\n\\n          <ng-container *ngIf=\\\"dnsCheck.errors.length !== 0; else noErrors\\\">\\n            <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"10px\\\">\\n              <mat-icon mat-list-icon class=\\\"error-icon\\\">error</mat-icon>\\n              <mat-card-title class=\\\"dns-card-title\\\">Invalid DNS config found for {{ selectedDomain }}</mat-card-title>\\n            </div>\\n            <mat-table [dataSource]=\\\"errorDataSource\\\">\\n              <ng-container matColumnDef=\\\"type\\\">\\n                <mat-header-cell *matHeaderCellDef> Type </mat-header-cell>\\n                <mat-cell *matCellDef=\\\"let row\\\" data-label=\\\"type\\\"> {{ row.type }} </mat-cell>\\n              </ng-container>\\n              <ng-container matColumnDef=\\\"message\\\">\\n                <mat-header-cell *matHeaderCellDef> Error message </mat-header-cell>\\n                <mat-cell *matCellDef=\\\"let row\\\" data-label=\\\"message\\\"> {{ row.message }} </mat-cell>\\n              </ng-container>\\n              <mat-header-row *matHeaderRowDef=\\\"errorDisplayedColumns\\\"></mat-header-row>\\n              <mat-row *matRowDef=\\\"let row; columns: errorDisplayedColumns\\\"></mat-row>\\n            </mat-table>\\n          </ng-container>\\n        </mat-card>\\n      </ng-container>\\n    </ng-container>\\n  </div>\\n</div>\\n\"","export default \"<h2 mat-dialog-title>Add Alias</h2>\\n<mat-dialog-content>\\n  <form (ngSubmit)=\\\"addAlias()\\\" [formGroup]=\\\"aliasForm\\\" fxLayout=\\\"column\\\" fxLayoutGap=\\\"10px\\\">\\n    <mat-form-field appearance=\\\"fill\\\">\\n      <mat-label>Existing domain</mat-label>\\n      <mat-select formControlName=\\\"existingDomain\\\" required>\\n        <ng-container *ngFor=\\\"let domain of domainsService.domainsStrings; let i = index\\\">\\n          <mat-option [value]=\\\"domain\\\">{{ domain }}</mat-option>\\n        </ng-container>\\n      </mat-select>\\n      <mat-error *ngIf=\\\"aliasForm.controls['existingDomain'].hasError('required')\\\">\\n        Existing domain is required\\n      </mat-error>\\n    </mat-form-field>\\n    <mat-form-field appearance=\\\"fill\\\">\\n      <mat-label>Alias domain</mat-label>\\n      <input type=\\\"text\\\" matInput formControlName=\\\"aliasDomain\\\" required />\\n      <mat-error *ngIf=\\\"aliasForm.controls['aliasDomain'].hasError('pattern')\\\">\\n        Not a valid domain name\\n      </mat-error>\\n      <mat-error *ngIf=\\\"aliasForm.controls['aliasDomain'].hasError('required')\\\">\\n        Alias domain is required\\n      </mat-error>\\n    </mat-form-field>\\n    <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"10px\\\" fxLayoutAlign=\\\"end\\\">\\n      <mat-spinner-button (btnClick)=\\\"dialogRef.close()\\\" [options]=\\\"cancelButtonConfig\\\"></mat-spinner-button>\\n      <mat-spinner-button [options]=\\\"addButtonConfig\\\"></mat-spinner-button>\\n    </div>\\n  </form>\\n</mat-dialog-content>\\n\"","export default \"<h2 mat-dialog-title>Add Domain</h2>\\n<mat-dialog-content>\\n  <form (ngSubmit)=\\\"addDomain()\\\">\\n    <mat-form-field appearance=\\\"fill\\\">\\n      <mat-label>Domain</mat-label>\\n      <input type=\\\"text\\\" matInput required [formControl]=\\\"domainInput\\\" />\\n      <mat-error *ngIf=\\\"domainInput.hasError('pattern')\\\">\\n        Not a valid domain name\\n      </mat-error>\\n    </mat-form-field>\\n    <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"10px\\\" fxLayoutAlign=\\\"end\\\">\\n      <mat-spinner-button (btnClick)=\\\"dialogRef.close()\\\" [options]=\\\"cancelButtonConfig\\\"></mat-spinner-button>\\n      <mat-spinner-button [options]=\\\"addButtonConfig\\\"></mat-spinner-button>\\n    </div>\\n  </form>\\n</mat-dialog-content>\\n\"","export default \"<h2 mat-dialog-title>{{ isModifyDialog ? 'Modify' : 'New' }} DKIM for {{ data.domain }}</h2>\\n<mat-dialog-content>\\n  <form [formGroup]=\\\"dkimForm\\\" id=\\\"dkimForm\\\" (ngSubmit)=\\\"updateDkim()\\\" fxLayout=\\\"column\\\" fxLayoutGap=\\\"10px\\\">\\n    <ng-template #selectorLoader>\\n      <td-loading-mask width=\\\"100%\\\" height=\\\"60px\\\"></td-loading-mask>\\n    </ng-template>\\n    <ng-container *ngIf=\\\"!isModifyDialog || (isModifyDialog && dkimKeySubscription.closed); else selectorLoader\\\">\\n      <mat-form-field appearance=\\\"fill\\\">\\n        <mat-label>Selector</mat-label>\\n        <input matInput formControlName=\\\"selector\\\" required />\\n        <mat-hint>{{ dkimForm.controls['selector'].value }}._domainkey.{{ data.domain }}</mat-hint>\\n        <mat-error *ngIf=\\\"dkimForm.controls['selector'].hasError('required')\\\">\\n          Selector is required\\n        </mat-error>\\n      </mat-form-field>\\n    </ng-container>\\n    <mat-form-field appearance=\\\"fill\\\" class=\\\"text-area\\\">\\n      <mat-label>Private key</mat-label>\\n      <textarea matInput formControlName=\\\"privateKey\\\"></textarea>\\n      <mat-hint>{{\\n        isModifyDialog ? 'Leave empty to keep the same key' : 'Leave empty to generate a new key'\\n      }}</mat-hint>\\n    </mat-form-field>\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between\\\">\\n      <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start\\\">\\n        <mat-spinner-button\\n          *ngIf=\\\"isModifyDialog\\\"\\n          (btnClick)=\\\"disableDialog()\\\"\\n          [options]=\\\"disableButtonConfig\\\"\\n        ></mat-spinner-button>\\n      </div>\\n      <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"end\\\" fxLayoutGap=\\\"10px\\\">\\n        <mat-spinner-button (btnClick)=\\\"dialogRef.close()\\\" [options]=\\\"cancelButtonConfig\\\"></mat-spinner-button>\\n        <div (click)=\\\"forceCheckForm()\\\">\\n          <mat-spinner-button [options]=\\\"saveButtonConfig\\\"></mat-spinner-button>\\n        </div>\\n      </div>\\n    </div>\\n  </form>\\n</mat-dialog-content>\\n\"","export default \"<!-- Switch to row or column mode depending on mobile or not -->\\n<div [fxLayout]=\\\"(isHandset$ | async) ? 'column' : 'row'\\\" fxLayoutGap=\\\"10px\\\">\\n  <mat-card fxFlex=\\\"30%\\\" [fxFlexAlign]=\\\"(isHandset$ | async) ? null : 'start'\\\">\\n    <mat-card-title>Your domains</mat-card-title>\\n    <mat-card-content>\\n      <p>\\n        These are the domains you have added to your account. You have access to any accounts and forwarders associated\\n        to these domains. Here you can add and delete domains, and manage the DKIM keys for them as well.\\n      </p>\\n      <p>\\n        Do note that when you delete a domain, the accounts will be deleted with it.\\n      </p>\\n    </mat-card-content>\\n  </mat-card>\\n  <mat-card fxFlex=\\\"70%\\\">\\n    <ng-template #loader>\\n      <td-loading-mask width=\\\"100%\\\" height=\\\"56px\\\"></td-loading-mask>\\n      <td-loading-mask width=\\\"100%\\\" height=\\\"48px\\\"></td-loading-mask>\\n      <td-loading-mask width=\\\"100%\\\" height=\\\"48px\\\"></td-loading-mask>\\n      <td-loading-mask width=\\\"100%\\\" height=\\\"48px\\\"></td-loading-mask>\\n    </ng-template>\\n    <ng-container *ngIf=\\\"domainsService.domainsSubscription && domainsService.domainsSubscription.closed; else loader\\\">\\n      <mat-table [dataSource]=\\\"dataSource\\\">\\n        <ng-container matColumnDef=\\\"domain\\\">\\n          <mat-header-cell *matHeaderCellDef> Domain </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let row\\\" data-label=\\\"domain\\\">\\n            <mat-icon *ngIf=\\\"!row.admin\\\">subdirectory_arrow_right</mat-icon> {{ row.domain }}\\n          </mat-cell>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"actions\\\">\\n          <mat-header-cell *matHeaderCellDef> Actions </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let row\\\" data-label=\\\"actions\\\">\\n            <button\\n              [routerLink]=\\\"['/domains', row.domain, 'dkim', row.dkim ? 'edit' : 'new']\\\"\\n              [matTooltip]=\\\"row.dkim ? 'Edit DKIM' : 'Add DKIM'\\\"\\n              matTooltipPosition=\\\"left\\\"\\n              matTooltipShowDelay=\\\"500\\\"\\n              mat-icon-button\\n            >\\n              <mat-icon [class.grayed-out]=\\\"row.dkim\\\">vpn_key</mat-icon>\\n              <mat-icon *ngIf=\\\"row.dkim\\\" class=\\\"overlap-icon\\\">{{ row.dkim ? 'edit' : 'close' }}</mat-icon>\\n            </button>\\n            <ng-container *ngIf=\\\"row.admin; else deleteAlias\\\">\\n              <button\\n                (click)=\\\"removeDomainConfirmDialog(row.domain)\\\"\\n                matTooltip=\\\"Remove this domain\\\"\\n                matTooltipPosition=\\\"left\\\"\\n                matTooltipShowDelay=\\\"500\\\"\\n                mat-icon-button\\n              >\\n                <mat-icon>delete</mat-icon>\\n              </button>\\n            </ng-container>\\n            <ng-template #deleteAlias>\\n              <button\\n                (click)=\\\"removeAliasConfirmDialog(row.aliasOf, row.domain)\\\"\\n                matTooltip=\\\"Remove this alias\\\"\\n                matTooltipPosition=\\\"left\\\"\\n                matTooltipShowDelay=\\\"500\\\"\\n                mat-icon-button\\n              >\\n                <mat-icon>link_off</mat-icon>\\n              </button>\\n            </ng-template>\\n          </mat-cell>\\n        </ng-container>\\n\\n        <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n        <mat-row *matRowDef=\\\"let row; columns: displayedColumns\\\"> </mat-row>\\n      </mat-table>\\n    </ng-container>\\n  </mat-card>\\n</div>\\n<router-outlet></router-outlet>\\n\\n<ng-container\\n  *ngIf=\\\"\\n    domainsService.domainsSubscription && domainsService.domainsSubscription.closed && dataSource.data.length > 0;\\n    else addDomain\\n  \\\"\\n>\\n  <eco-fab-speed-dial animationMode=\\\"scale\\\">\\n    <eco-fab-speed-dial-trigger spin=\\\"true\\\">\\n      <button mat-fab><mat-icon class=\\\"spin135\\\">add</mat-icon></button>\\n    </eco-fab-speed-dial-trigger>\\n\\n    <eco-fab-speed-dial-actions>\\n      <button mat-mini-fab (click)=\\\"addDomainDialog()\\\" matTooltip=\\\"Add domain\\\" matTooltipPosition=\\\"left\\\">\\n        <mat-icon>domain</mat-icon>\\n      </button>\\n      <button mat-mini-fab (click)=\\\"addAliasDialog()\\\" matTooltip=\\\"Add alias\\\" matTooltipPosition=\\\"left\\\">\\n        <mat-icon>link</mat-icon>\\n      </button>\\n    </eco-fab-speed-dial-actions>\\n  </eco-fab-speed-dial>\\n</ng-container>\\n<ng-template #addDomain>\\n  <app-fab-button icon=\\\"add\\\" (click)=\\\"addDomainDialog()\\\"></app-fab-button>\\n</ng-template>\\n\"","export default \"<h2 mat-dialog-title>{{ isModifyDialog ? 'Modify' : 'New' }} forwarder</h2>\\n<mat-dialog-content>\\n  <ng-template #loader>\\n    <div class=\\\"loader-container\\\" fxLayout=\\\"column\\\" fxLayoutGap=\\\"calc(10px + 1.34375em)\\\">\\n      <td-loading-mask width=\\\"100%\\\" height=\\\"59.5px\\\"></td-loading-mask>\\n      <div [fxLayout]=\\\"(isHandset$ | async) ? 'column' : 'row'\\\" class=\\\"row-container\\\" fxLayoutGap=\\\"10px\\\">\\n        <td-loading-mask width=\\\"100%\\\" height=\\\"59.5px\\\"></td-loading-mask>\\n        <div *ngIf=\\\"!(isHandset$ | async)\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\n          @\\n        </div>\\n        <td-loading-mask width=\\\"100%\\\" height=\\\"59.5px\\\"></td-loading-mask>\\n      </div>\\n      <td-loading-mask width=\\\"100%\\\" height=\\\"73.3px\\\"></td-loading-mask>\\n      <td-loading-mask width=\\\"100%\\\" height=\\\"59.5px\\\"></td-loading-mask>\\n      <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"10px\\\" fxLayoutAlign=\\\"end\\\">\\n        <mat-spinner-button (btnClick)=\\\"dialogRef.close()\\\" [options]=\\\"cancelButtonConfig\\\"></mat-spinner-button>\\n        <td-loading-mask width=\\\"66px\\\" height=\\\"36px\\\"></td-loading-mask>\\n      </div>\\n    </div>\\n  </ng-template>\\n  <ng-container\\n    *ngIf=\\\"\\n      (!isModifyDialog && domainsService.domainsSubscription && domainsService.domainsSubscription.closed) ||\\n        (isModifyDialog &&\\n          domainsService.domainsSubscription &&\\n          domainsService.domainsSubscription.closed &&\\n          forwarderDetailsSubscription &&\\n          forwarderDetailsSubscription.closed);\\n      else loader\\n    \\\"\\n  >\\n    <form\\n      [formGroup]=\\\"forwarderForm\\\"\\n      id=\\\"forwarderForm\\\"\\n      (ngSubmit)=\\\"updateForwarder()\\\"\\n      fxLayout=\\\"column\\\"\\n      fxLayoutGap=\\\"10px\\\"\\n    >\\n      <mat-form-field appearance=\\\"fill\\\">\\n        <mat-label>Name</mat-label>\\n        <input matInput formControlName=\\\"name\\\" />\\n      </mat-form-field>\\n\\n      <div [fxLayout]=\\\"(isHandset$ | async) ? 'column' : 'row'\\\" class=\\\"row-container\\\" fxLayoutGap=\\\"10px\\\">\\n        <mat-form-field appearance=\\\"fill\\\" [class.user-input-right]=\\\"!(isHandset$ | async)\\\">\\n          <mat-label>User</mat-label>\\n          <input matInput formControlName=\\\"addressUser\\\" [required]=\\\"isModifyDialog ? null : 'required'\\\" />\\n          <mat-error *ngIf=\\\"forwarderForm.controls['addressUser'].hasError('required')\\\">\\n            User is required\\n          </mat-error>\\n          <mat-error *ngIf=\\\"forwarderForm.controls['addressUser'].hasError('AddressUsername')\\\">\\n            Invalid email address format\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <div *ngIf=\\\"!(isHandset$ | async)\\\" class=\\\"at-symbol\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\n          @\\n        </div>\\n\\n        <mat-form-field appearance=\\\"fill\\\">\\n          <mat-label>Domain</mat-label>\\n          <span *ngIf=\\\"isHandset$ | async\\\" matPrefix>@</span>\\n          <mat-select formControlName=\\\"domain\\\" [required]=\\\"isModifyDialog ? null : 'required'\\\">\\n            <ng-container *ngFor=\\\"let domain of domainsService.domainsStrings; let i = index\\\">\\n              <mat-option [value]=\\\"domain\\\">{{ domain }}</mat-option>\\n            </ng-container>\\n          </mat-select>\\n          <mat-error *ngIf=\\\"forwarderForm.controls['domain'].hasError('required')\\\">\\n            Domain is required\\n          </mat-error>\\n        </mat-form-field>\\n      </div>\\n\\n      <mat-form-field appearance=\\\"fill\\\">\\n        <mat-label>Forwarding targets</mat-label>\\n        <mat-chip-list #targetsChipList formControlName=\\\"newTarget\\\">\\n          <mat-chip\\n            *ngFor=\\\"let forwardTarget of forwardTargets\\\"\\n            selectable=\\\"false\\\"\\n            removable=\\\"true\\\"\\n            (removed)=\\\"removeTarget(forwardTarget)\\\"\\n          >\\n            {{ forwardTarget }}\\n            <mat-icon matChipRemove>cancel</mat-icon>\\n          </mat-chip>\\n          <input\\n            matInput\\n            formControlName=\\\"newTarget\\\"\\n            [matChipInputFor]=\\\"targetsChipList\\\"\\n            matChipInputAddOnBlur=\\\"true\\\"\\n            [matChipInputSeparatorKeyCodes]=\\\"newTargetSeperators\\\"\\n            (matChipInputTokenEnd)=\\\"addTarget($event)\\\"\\n          />\\n        </mat-chip-list>\\n        <mat-error *ngIf=\\\"forwarderForm.controls['newTarget'].hasError('forwardingTarget')\\\">\\n          Not an email address, smtp address, or http address\\n        </mat-error>\\n      </mat-form-field>\\n\\n      <mat-form-field appearance=\\\"fill\\\">\\n        <mat-label>Forward limit</mat-label>\\n        <input matInput type=\\\"number\\\" formControlName=\\\"forwardLimit\\\" />\\n        <mat-hint *ngIf=\\\"isModifyDialog\\\">Current usage: {{ forwarderDetails.limits.forward.used }}</mat-hint>\\n        <mat-error\\n          *ngIf=\\\"\\n            forwarderForm.controls['forwardLimit'].hasError('min') ||\\n            forwarderForm.controls['forwardLimit'].hasError('max')\\n          \\\"\\n        >\\n          Limit must be between 1-200\\n        </mat-error>\\n      </mat-form-field>\\n      <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"10px\\\" fxLayoutAlign=\\\"end\\\">\\n        <mat-spinner-button (btnClick)=\\\"dialogRef.close()\\\" [options]=\\\"cancelButtonConfig\\\"></mat-spinner-button>\\n        <div (click)=\\\"forceCheckForm()\\\">\\n          <mat-spinner-button [options]=\\\"saveButtonConfig\\\"></mat-spinner-button>\\n        </div>\\n      </div>\\n    </form>\\n  </ng-container>\\n</mat-dialog-content>\\n\"","export default \"<!-- Switch to row or column mode depending on mobile or not -->\\n<div [fxLayout]=\\\"(isHandset$ | async) ? 'column' : 'row'\\\" fxLayoutGap=\\\"10px\\\">\\n  <mat-card fxFlex=\\\"30%\\\" [fxFlexAlign]=\\\"(isHandset$ | async) ? null : 'start'\\\">\\n    <mat-card-title>Your forwarders</mat-card-title>\\n    <mat-card-content\\n      >Here you can manage your forwarders. You can forward to any email address, smtp server, or HTTP server (POST\\n      request).</mat-card-content\\n    >\\n  </mat-card>\\n  <mat-card fxFlex=\\\"70%\\\">\\n    <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between\\\">\\n      <mat-form-field appearance=\\\"fill\\\">\\n        <mat-label>Filter</mat-label>\\n        <input matInput type=\\\"search\\\" (keyup)=\\\"applyFilter($event.target.value)\\\" />\\n      </mat-form-field>\\n      <mat-paginator\\n        [pageSizeOptions]=\\\"[10, 25, 50, 100, 200, 300, 400, 500]\\\"\\n        pageSize=\\\"50\\\"\\n        showFirstLastButtons\\n      ></mat-paginator>\\n    </div>\\n    <ng-template #loader>\\n      <td-loading-mask width=\\\"100%\\\" height=\\\"56px\\\"></td-loading-mask>\\n      <td-loading-mask width=\\\"100%\\\" height=\\\"48px\\\"></td-loading-mask>\\n      <td-loading-mask width=\\\"100%\\\" height=\\\"48px\\\"></td-loading-mask>\\n      <td-loading-mask width=\\\"100%\\\" height=\\\"48px\\\"></td-loading-mask>\\n    </ng-template>\\n    <ng-container *ngIf=\\\"forwarderSubscription.closed; else loader\\\">\\n      <mat-table [dataSource]=\\\"dataSource\\\" matSort>\\n        <ng-container matColumnDef=\\\"address\\\">\\n          <mat-header-cell *matHeaderCellDef mat-sort-header> Forward address </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let row\\\" data-label=\\\"address\\\"> {{ row.address }} </mat-cell>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"actions\\\">\\n          <mat-header-cell *matHeaderCellDef> Actions </mat-header-cell>\\n          <mat-cell *matCellDef=\\\"let row\\\" data-label=\\\"actions\\\">\\n            <button\\n              [routerLink]=\\\"['/forwarders', row.id]\\\"\\n              matTooltip=\\\"Modify forwarder\\\"\\n              matTooltipPosition=\\\"left\\\"\\n              matTooltipShowDelay=\\\"500\\\"\\n              mat-icon-button\\n              aria-label=\\\"Modify forwarder\\\"\\n            >\\n              <mat-icon>edit</mat-icon>\\n            </button>\\n            <button\\n              (click)=\\\"removeConfirmDialog(row.id, row.address)\\\"\\n              matTooltip=\\\"Remove forwarder\\\"\\n              matTooltipPosition=\\\"left\\\"\\n              matTooltipShowDelay=\\\"500\\\"\\n              mat-icon-button\\n              aria-label=\\\"Remove forwarder\\\"\\n            >\\n              <mat-icon>delete</mat-icon>\\n            </button>\\n          </mat-cell>\\n        </ng-container>\\n\\n        <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n        <mat-row *matRowDef=\\\"let row; columns: displayedColumns\\\"> </mat-row>\\n      </mat-table>\\n    </ng-container>\\n  </mat-card>\\n</div>\\n<app-fab-button icon=\\\"add\\\" (click)=\\\"forwarderDialog()\\\"></app-fab-button>\\n\"","export default \"<div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"layout-center\\\" [class.is-handset]=\\\"isHandset$ | async\\\">\\n  <mat-card [class.is-handset]=\\\"isHandset$ | async\\\">\\n    <mat-card-title>Login</mat-card-title>\\n    <mat-card-content>\\n      <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"login()\\\">\\n        <div fxLayout=\\\"column\\\" fxLayoutGap=\\\"10px\\\">\\n          <mat-form-field appearance=\\\"fill\\\">\\n            <mat-label>Username</mat-label>\\n            <input type=\\\"text\\\" matInput formControlName=\\\"username\\\" required />\\n            <mat-error *ngIf=\\\"loginForm.controls['username'].hasError('required')\\\">\\n              Username is required\\n            </mat-error>\\n          </mat-form-field>\\n          <mat-form-field appearance=\\\"fill\\\">\\n            <mat-label>Password</mat-label>\\n            <input type=\\\"password\\\" matInput formControlName=\\\"password\\\" required />\\n            <mat-error *ngIf=\\\"loginForm.controls['password'].hasError('required')\\\">\\n              Password is required\\n            </mat-error>\\n          </mat-form-field>\\n        </div>\\n\\n        <div align=\\\"end\\\">\\n          <mat-spinner-button type=\\\"submit\\\" [options]=\\\"loginButtonConfig\\\"></mat-spinner-button>\\n        </div>\\n      </form>\\n    </mat-card-content>\\n  </mat-card>\\n</div>\\n\"","export default \"<div class=\\\"single-column-content\\\">\\n  <div fxLayout=\\\"column\\\" fxLayoutGap=\\\"10px\\\">\\n    <mat-card>\\n      <mat-card-title>{{ profileService.user.username }}</mat-card-title>\\n      <mat-card-content>\\n        <p>\\n          You are logged in as {{ profileService.user.username }}, you've got access to {{ quota.formatted }} of\\n          storage.\\n        </p>\\n      </mat-card-content>\\n      <mat-card-actions>\\n        <button (click)=\\\"logout()\\\" mat-button color=\\\"warn\\\">LOG OUT</button>\\n        <button (click)=\\\"logoutAllDialog()\\\" mat-button color=\\\"warn\\\">LOG OUT FROM ALL DEVICES</button>\\n      </mat-card-actions>\\n    </mat-card>\\n    <mat-card>\\n      <mat-card-title>Storage used</mat-card-title>\\n      <mat-card-content>\\n        <p>Currently using {{ usage.bytes / quota.bytes | percent: '1.0-2' }} of storage.</p>\\n        <div fxLayout=\\\"row\\\" fxLayoutGap=\\\"10px\\\">\\n          <mat-progress-bar\\n            fxFlexAlign=\\\"center\\\"\\n            [mode]=\\\"calculateStorageSubscription && calculateStorageSubscription.closed ? 'determinate' : 'query'\\\"\\n            value=\\\"{{ (usage.bytes / quota.bytes) * 100 | number: '1.0-2' }}\\\"\\n          ></mat-progress-bar>\\n          <p class=\\\"usage-text\\\">{{ usage.formatted }}/{{ quota.formatted }}</p>\\n        </div>\\n      </mat-card-content>\\n    </mat-card>\\n    <mat-card>\\n      <mat-card-title>Change username/password</mat-card-title>\\n      <mat-card-content>\\n        <form [formGroup]=\\\"loginDetailsForm\\\" (ngSubmit)=\\\"changeLoginDetails()\\\">\\n          <div fxLayout=\\\"column\\\" fxLayoutGap=\\\"10px\\\">\\n            <mat-form-field appearance=\\\"fill\\\">\\n              <mat-label>Username</mat-label>\\n              <input type=\\\"text\\\" matInput formControlName=\\\"username\\\" />\\n              <mat-error *ngIf=\\\"loginDetailsForm.controls['username'].hasError('isAscii')\\\">\\n                Username can only contain ASCII characters\\n              </mat-error>\\n              <mat-error *ngIf=\\\"loginDetailsForm.controls['username'].hasError('notContains')\\\">\\n                Username can not contain spaces\\n              </mat-error>\\n            </mat-form-field>\\n            <mat-form-field appearance=\\\"fill\\\">\\n              <mat-label>Password</mat-label>\\n              <input type=\\\"password\\\" matInput formControlName=\\\"password\\\" />\\n              <mat-error *ngIf=\\\"loginDetailsForm.controls['password'].hasError('required')\\\">\\n                Password is required\\n              </mat-error>\\n            </mat-form-field>\\n          </div>\\n\\n          <div align=\\\"end\\\">\\n            <mat-spinner-button type=\\\"submit\\\" [options]=\\\"loginDetailsButtonConfig\\\"></mat-spinner-button>\\n          </div>\\n        </form>\\n      </mat-card-content>\\n    </mat-card>\\n  </div>\\n</div>\\n\"","export default \"<h2 mat-dialog-title>{{ data.title }}</h2>\\n<mat-dialog-content>\\n  {{ data.text }}\\n</mat-dialog-content>\\n<mat-dialog-actions align=\\\"end\\\">\\n  <ng-container *ngFor=\\\"let button of data.buttons\\\">\\n    <mat-spinner-button\\n      (btnClick)=\\\"button.callback ? button.callback(dialogRef) : dialogRef.close()\\\"\\n      [options]=\\\"button.options\\\"\\n    ></mat-spinner-button>\\n  </ng-container>\\n</mat-dialog-actions>\\n\"","export default \"<div class=\\\"flex-container\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between\\\">\\n  <span>{{ message }}</span>\\n  <div *ngIf=\\\"errorDetails\\\" class=\\\"action\\\">\\n    <button mat-button (click)=\\\"showDetails()\\\" color='accent'>Details</button>\\n  </div>\\n</div>\"","export default \"<button mat-fab>\\n  <mat-icon>{{ icon }}</mat-icon>\\n</button>\\n\"","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgModule } from '@angular/core'\nimport { RouterModule, Routes } from '@angular/router'\n\nimport { AccountsComponent } from './pages/accounts/accounts.component'\nimport { DnsComponent } from './pages/dns/dns.component'\nimport { DkimDialogEntryComponent } from './pages/domains/components/dkim-dialog/dkim-dialog.component'\nimport { DomainsComponent } from './pages/domains/domains.component'\nimport { ForwardersComponent } from './pages/forwarders/forwarders.component'\nimport { LoginComponent } from './pages/login/login.component'\nimport { ProfileComponent } from './pages/profile/profile.component'\n\nconst routes: Routes = [\n  {\n    path: 'login',\n    component: LoginComponent,\n    data: {\n      isFullscreen: true,\n    },\n  },\n  {\n    path: 'domains',\n    component: DomainsComponent,\n    data: {\n      title: 'Domains',\n    },\n    children: [\n      {\n        path: ':domain/dkim/:action',\n        component: DkimDialogEntryComponent,\n      },\n    ],\n  },\n  {\n    path: 'accounts',\n    redirectTo: 'accounts/',\n  },\n  {\n    path: 'accounts/:id',\n    component: AccountsComponent,\n    data: {\n      title: 'Email Accounts',\n    },\n  },\n  {\n    path: 'forwarders',\n    redirectTo: 'forwarders/',\n  },\n  {\n    path: 'forwarders/:id',\n    component: ForwardersComponent,\n    data: {\n      title: 'Forwarders',\n    },\n  },\n  {\n    path: 'dns',\n    component: DnsComponent,\n    data: {\n      title: 'DNS Check',\n    },\n  },\n  {\n    path: 'profile',\n    component: ProfileComponent,\n    data: {\n      title: 'Profile',\n    },\n  },\n  {\n    path: '**',\n    redirectTo: 'accounts/',\n  },\n]\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","export default \".sidenav-container {\\n  height: 100%;\\n}\\n\\n.sidenav {\\n  width: 275px;\\n}\\n\\n.sidenav .mat-toolbar {\\n  background: inherit;\\n}\\n\\n.mat-toolbar.mat-primary {\\n  position: -webkit-sticky;\\n  position: sticky;\\n  top: 0;\\n  z-index: 1;\\n}\\n\\n.content {\\n  margin: auto;\\n  padding: 20px;\\n  max-width: 1200px;\\n}\\n\\n.external-link {\\n  font-size: 16px;\\n  width: 16px;\\n  height: 16px;\\n  color: grey;\\n}\\n\\n.nav-top-part {\\n  margin-bottom: 70px;\\n}\\n\\n.profile-link.mat-list-item.mat-list-item-with-avatar {\\n  height: 70px;\\n  background-color: white;\\n  position: absolute;\\n  bottom: 0;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3JhbWlyby9EZXYvRHVja3lQYW5lbC9zcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsWUFBQTtBQ0NGOztBREVBO0VBQ0UsWUFBQTtBQ0NGOztBREVBO0VBQ0UsbUJBQUE7QUNDRjs7QURFQTtFQUNFLHdCQUFBO0VBQUEsZ0JBQUE7RUFDQSxNQUFBO0VBQ0EsVUFBQTtBQ0NGOztBREVBO0VBQ0UsWUFBQTtFQUNBLGFBQUE7RUFDQSxpQkFBQTtBQ0NGOztBREVBO0VBQ0UsZUFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0EsV0FBQTtBQ0NGOztBREVBO0VBQ0UsbUJBQUE7QUNDRjs7QURFQTtFQUNFLFlBQUE7RUFDQSx1QkFBQTtFQUNBLGtCQUFBO0VBQ0EsU0FBQTtBQ0NGIiwiZmlsZSI6InNyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnNpZGVuYXYtY29udGFpbmVyIHtcbiAgaGVpZ2h0OiAxMDAlO1xufVxuXG4uc2lkZW5hdiB7XG4gIHdpZHRoOiAyNzVweDtcbn1cblxuLnNpZGVuYXYgLm1hdC10b29sYmFyIHtcbiAgYmFja2dyb3VuZDogaW5oZXJpdDtcbn1cblxuLm1hdC10b29sYmFyLm1hdC1wcmltYXJ5IHtcbiAgcG9zaXRpb246IHN0aWNreTtcbiAgdG9wOiAwO1xuICB6LWluZGV4OiAxO1xufVxuXG4uY29udGVudCB7XG4gIG1hcmdpbjogYXV0bztcbiAgcGFkZGluZzogMjBweDtcbiAgbWF4LXdpZHRoOiAxMjAwcHg7XG59XG5cbi5leHRlcm5hbC1saW5rIHtcbiAgZm9udC1zaXplOiAxNnB4O1xuICB3aWR0aDogMTZweDtcbiAgaGVpZ2h0OiAxNnB4O1xuICBjb2xvcjogZ3JleTtcbn1cblxuLm5hdi10b3AtcGFydCB7XG4gIG1hcmdpbi1ib3R0b206IDcwcHg7XG59XG5cbi5wcm9maWxlLWxpbmsubWF0LWxpc3QtaXRlbS5tYXQtbGlzdC1pdGVtLXdpdGgtYXZhdGFyIHtcbiAgaGVpZ2h0OiA3MHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3R0b206IDA7XG59IiwiLnNpZGVuYXYtY29udGFpbmVyIHtcbiAgaGVpZ2h0OiAxMDAlO1xufVxuXG4uc2lkZW5hdiB7XG4gIHdpZHRoOiAyNzVweDtcbn1cblxuLnNpZGVuYXYgLm1hdC10b29sYmFyIHtcbiAgYmFja2dyb3VuZDogaW5oZXJpdDtcbn1cblxuLm1hdC10b29sYmFyLm1hdC1wcmltYXJ5IHtcbiAgcG9zaXRpb246IHN0aWNreTtcbiAgdG9wOiAwO1xuICB6LWluZGV4OiAxO1xufVxuXG4uY29udGVudCB7XG4gIG1hcmdpbjogYXV0bztcbiAgcGFkZGluZzogMjBweDtcbiAgbWF4LXdpZHRoOiAxMjAwcHg7XG59XG5cbi5leHRlcm5hbC1saW5rIHtcbiAgZm9udC1zaXplOiAxNnB4O1xuICB3aWR0aDogMTZweDtcbiAgaGVpZ2h0OiAxNnB4O1xuICBjb2xvcjogZ3JleTtcbn1cblxuLm5hdi10b3AtcGFydCB7XG4gIG1hcmdpbi1ib3R0b206IDcwcHg7XG59XG5cbi5wcm9maWxlLWxpbmsubWF0LWxpc3QtaXRlbS5tYXQtbGlzdC1pdGVtLXdpdGgtYXZhdGFyIHtcbiAgaGVpZ2h0OiA3MHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBib3R0b206IDA7XG59Il19 */\"","import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout'\nimport { Component, OnInit, ViewChild } from '@angular/core'\nimport { MatSidenav } from '@angular/material'\nimport { Router, RoutesRecognized } from '@angular/router'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\n\nimport { NavCategory } from './app.interfaces'\nimport { DomainsService } from './pages/domains/domains.service'\nimport { ProfileService } from './pages/profile/profile.service'\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  public constructor(\n    private breakpointObserver: BreakpointObserver,\n    private router: Router,\n    public profileService: ProfileService,\n    public domainsService: DomainsService,\n  ) {}\n\n  public title = 'DuckyPanel'\n  public navCategories: NavCategory[] = [\n    {\n      title: 'General',\n      items: [\n        {\n          name: 'Dashboard',\n          icon: 'dashboard',\n          routerLink: '/',\n        },\n      ],\n    },\n    {\n      title: 'Account management',\n      items: [\n        {\n          name: 'Domains',\n          icon: 'domain',\n          routerLink: '/domains',\n        },\n        {\n          name: 'Email Accounts',\n          icon: 'email',\n          routerLink: '/accounts',\n        },\n        {\n          name: 'Forwarders',\n          icon: 'send',\n          routerLink: '/forwarders/',\n        },\n      ],\n    },\n    {\n      title: 'Help',\n      items: [\n        {\n          name: 'DNS records',\n          icon: 'dns',\n          routerLink: '/dns',\n        },\n      ],\n    },\n  ]\n\n  @ViewChild('drawer', { static: true })\n  private drawer: MatSidenav\n  public isFullscreen: boolean\n\n  public ngOnInit(): void {\n    this.profileService.getUserInfo()\n    this.domainsService.getDomains()\n    this.router.events.subscribe((event): void => {\n      if (event instanceof RoutesRecognized && event.state.root.firstChild) {\n        this.isFullscreen = event.state.root.firstChild.data.isFullscreen ? true : false\n        this.title = event.state.root.firstChild.data.title ? event.state.root.firstChild.data.title : 'DuckyPanel'\n      }\n    })\n  }\n\n  public isHandset$: Observable<boolean> = this.breakpointObserver\n    .observe(Breakpoints.Handset)\n    .pipe(map((result): boolean => result.matches))\n\n  public closeDrawerConditional(): void {\n    this.isHandset$.subscribe((isHandset$): void => {\n      if (isHandset$) {\n        this.drawer.close()\n      }\n    })\n  }\n}\n","import { LayoutModule } from '@angular/cdk/layout'\nimport { HttpClientModule } from '@angular/common/http'\nimport { NgModule } from '@angular/core'\nimport { FlexLayoutModule } from '@angular/flex-layout'\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms'\nimport {\n  MAT_SNACK_BAR_DEFAULT_OPTIONS,\n  MatButtonModule,\n  MatCardModule,\n  MatCheckboxModule,\n  MatDialogModule,\n  MatFormFieldModule,\n  MatGridListModule,\n  MatIconModule,\n  MatInputModule,\n  MatListModule,\n  MatOptionModule,\n  MatPaginatorModule,\n  MatProgressBarModule,\n  MatProgressSpinnerModule,\n  MatSelectModule,\n  MatSidenavModule,\n  MatSnackBarModule,\n  MatSortModule,\n  MatTableModule,\n  MatToolbarModule,\n  MatTooltipModule,\n} from '@angular/material'\nimport { MatChipsModule } from '@angular/material/chips'\nimport { BrowserModule } from '@angular/platform-browser'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { TdLoadingMaskModule } from '@covalent/experimental/loading-mask'\nimport { EcoFabSpeedDialModule } from '@ecodev/fab-speed-dial'\nimport { ApiModule, Configuration, ConfigurationParameters } from 'ducky-api-client-angular'\nimport { MatProgressButtonsModule } from 'mat-progress-buttons'\n\nimport { AppRoutingModule } from './app-routing.module'\nimport { AppComponent } from './app.component'\nimport { AccountsComponent } from './pages/accounts/accounts.component'\nimport { AccountDialogComponent } from './pages/accounts/components/account-dialog/account-dialog.component'\nimport { DnsComponent } from './pages/dns/dns.component'\nimport { AddAliasDialogComponent } from './pages/domains/components/add-alias-dialog/add-alias-dialog.component'\nimport { AddDomainDialogComponent } from './pages/domains/components/add-domain-dialog/add-domain-dialog.component'\nimport {\n  DkimDialogComponent,\n  DkimDialogEntryComponent,\n} from './pages/domains/components/dkim-dialog/dkim-dialog.component'\nimport { DomainsComponent } from './pages/domains/domains.component'\nimport { ForwarderDialogComponent } from './pages/forwarders/components/forwarder-dialog/forwarder-dialog.component'\nimport { ForwardersComponent } from './pages/forwarders/forwarders.component'\nimport { LoginComponent } from './pages/login/login.component'\nimport { ProfileComponent } from './pages/profile/profile.component'\nimport { DialogComponent } from './shared/components/dialog/dialog.component'\nimport { ErrorSnackbarComponent } from './shared/components/error-snackbar/error-snackbar.component'\nimport { FabButtonComponent } from './shared/components/fab-button/fab-button.component'\n\n// TODO: take these values from a config file or envvar\nexport function apiConfigFactory(): Configuration {\n  const accessToken = localStorage.getItem('access_token')\n  const params: ConfigurationParameters = {\n    basePath: 'http://localhost:3000',\n    accessToken: accessToken,\n  }\n  return new Configuration(params)\n}\n@NgModule({\n  entryComponents: [\n    DialogComponent,\n    AccountDialogComponent,\n    AddDomainDialogComponent,\n    AddAliasDialogComponent,\n    ErrorSnackbarComponent,\n    ForwarderDialogComponent,\n    DkimDialogComponent,\n  ],\n  declarations: [\n    AppComponent,\n    DomainsComponent,\n    DialogComponent,\n    AccountsComponent,\n    FabButtonComponent,\n    AccountDialogComponent,\n    AddDomainDialogComponent,\n    AddAliasDialogComponent,\n    LoginComponent,\n    ErrorSnackbarComponent,\n    ForwardersComponent,\n    ForwarderDialogComponent,\n    DkimDialogComponent,\n    DkimDialogEntryComponent,\n    DnsComponent,\n    ProfileComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    LayoutModule,\n    FlexLayoutModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    MatTableModule,\n    MatCardModule,\n    MatDialogModule,\n    MatGridListModule,\n    MatTooltipModule,\n    MatSnackBarModule,\n    MatInputModule,\n    MatChipsModule,\n    MatOptionModule,\n    MatSelectModule,\n    MatFormFieldModule,\n    MatSortModule,\n    MatCheckboxModule,\n    MatProgressSpinnerModule,\n    ApiModule.forRoot(apiConfigFactory),\n    MatProgressButtonsModule.forRoot(),\n    FormsModule,\n    ReactiveFormsModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    EcoFabSpeedDialModule,\n    TdLoadingMaskModule,\n  ],\n  providers: [\n    {\n      provide: MAT_SNACK_BAR_DEFAULT_OPTIONS,\n      useValue: { duration: 5000 },\n    },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","export default \".mat-column-actions {\\n  -webkit-box-flex: 0;\\n          flex: 0 0 80px;\\n}\\n\\n.mat-column-actions.mat-header-cell {\\n  -webkit-box-pack: center;\\n          justify-content: center;\\n}\\n\\n.mat-column-quotaUsedFormatted {\\n  -webkit-box-orient: horizontal;\\n  -webkit-box-direction: reverse;\\n          flex-direction: row-reverse;\\n  padding-right: 15px;\\n}\\n\\nmat-table {\\n  min-width: 650px;\\n}\\n\\n.account-table-card {\\n  overflow-x: scroll;\\n  scrollbar-width: none;\\n  -ms-overflow-style: none;\\n}\\n\\n.account-table-card::-webkit-scrollbar {\\n  width: 0;\\n  height: 0;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3JhbWlyby9EZXYvRHVja3lQYW5lbC9zcmMvYXBwL3BhZ2VzL2FjY291bnRzL2FjY291bnRzLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9wYWdlcy9hY2NvdW50cy9hY2NvdW50cy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTtFQUNFLG1CQUFBO1VBQUEsY0FBQTtBQ0FGOztBRElBO0VBQ0Usd0JBQUE7VUFBQSx1QkFBQTtBQ0RGOztBREtBO0VBQ0UsOEJBQUE7RUFBQSw4QkFBQTtVQUFBLDJCQUFBO0VBQ0EsbUJBQUE7QUNGRjs7QURNQTtFQUNFLGdCQUFBO0FDSEY7O0FETUE7RUFDRSxrQkFBQTtFQUNBLHFCQUFBO0VBQ0Esd0JBQUE7QUNIRjs7QURNQTtFQUNFLFFBQUE7RUFDQSxTQUFBO0FDSEYiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy9hY2NvdW50cy9hY2NvdW50cy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEFsaWduIGFjdGlvbnMgY29sdW1uIHRvIHRoZSByaWdodFxuLm1hdC1jb2x1bW4tYWN0aW9ucyB7XG4gIGZsZXg6IDAgMCA4MHB4O1xufVxuXG4vLyBBbGlnbiBhY3Rpb25zIGNvbHVtbiBjZW50ZXJcbi5tYXQtY29sdW1uLWFjdGlvbnMubWF0LWhlYWRlci1jZWxsIHtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG5cbi8vIEFsaWduIHVzZWQgY29sdW1uIHRvIGJlIHJpZ2h0IG5leHQgdG8gcXVvdGEgY29sdW1uXG4ubWF0LWNvbHVtbi1xdW90YVVzZWRGb3JtYXR0ZWQge1xuICBmbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2U7XG4gIHBhZGRpbmctcmlnaHQ6IDE1cHg7XG59XG5cbi8vIERvbid0IGxldCB0aGUgdGFibGUgZ2V0IHRvbyBuYXJyb3cgYW5kIGhpZGUgc2Nyb2xsYmFyXG5tYXQtdGFibGUge1xuICBtaW4td2lkdGg6IDY1MHB4O1xufVxuXG4uYWNjb3VudC10YWJsZS1jYXJkIHtcbiAgb3ZlcmZsb3cteDogc2Nyb2xsO1xuICBzY3JvbGxiYXItd2lkdGg6IG5vbmU7XG4gIC1tcy1vdmVyZmxvdy1zdHlsZTogbm9uZTtcbn1cblxuLmFjY291bnQtdGFibGUtY2FyZDo6LXdlYmtpdC1zY3JvbGxiYXIge1xuICB3aWR0aDogMDtcbiAgaGVpZ2h0OiAwO1xufVxuIiwiLm1hdC1jb2x1bW4tYWN0aW9ucyB7XG4gIGZsZXg6IDAgMCA4MHB4O1xufVxuXG4ubWF0LWNvbHVtbi1hY3Rpb25zLm1hdC1oZWFkZXItY2VsbCB7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xufVxuXG4ubWF0LWNvbHVtbi1xdW90YVVzZWRGb3JtYXR0ZWQge1xuICBmbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2U7XG4gIHBhZGRpbmctcmlnaHQ6IDE1cHg7XG59XG5cbm1hdC10YWJsZSB7XG4gIG1pbi13aWR0aDogNjUwcHg7XG59XG5cbi5hY2NvdW50LXRhYmxlLWNhcmQge1xuICBvdmVyZmxvdy14OiBzY3JvbGw7XG4gIHNjcm9sbGJhci13aWR0aDogbm9uZTtcbiAgLW1zLW92ZXJmbG93LXN0eWxlOiBub25lO1xufVxuXG4uYWNjb3VudC10YWJsZS1jYXJkOjotd2Via2l0LXNjcm9sbGJhciB7XG4gIHdpZHRoOiAwO1xuICBoZWlnaHQ6IDA7XG59Il19 */\"","import { HttpErrorResponse } from '@angular/common/http'\nimport { Component, OnInit, ViewChild } from '@angular/core'\nimport {\n  MatDialog,\n  MatDialogConfig,\n  MatDialogRef,\n  MatPaginator,\n  MatSnackBar,\n  MatSort,\n  MatTableDataSource,\n} from '@angular/material'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { AccountListItem, EmailAccountsService } from 'ducky-api-client-angular'\nimport { Subscription } from 'rxjs'\nimport { DialogComponent } from 'src/app/shared/components/dialog/dialog.component'\nimport { DialogConfig } from 'src/app/shared/components/dialog/dialog.interfaces'\nimport { ErrorSnackbarService } from 'src/app/shared/components/error-snackbar/error-snackbar.service'\nimport { formatBytes } from 'src/app/shared/functions/formatBytes.function'\n\nimport { AccountListItemFormatted } from './accounts.interfaces'\nimport { AccountDialogComponent } from './components/account-dialog/account-dialog.component'\n\n@Component({\n  selector: 'app-accounts',\n  templateUrl: './accounts.component.html',\n  styleUrls: ['./accounts.component.scss'],\n})\nexport class AccountsComponent implements OnInit {\n  public constructor(\n    public dialog: MatDialog,\n    private readonly accountsService: EmailAccountsService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private snackBar: MatSnackBar,\n    private errorSnackbarService: ErrorSnackbarService,\n  ) {}\n\n  public displayedColumns = ['address', 'name', 'quotaUsedFormatted', 'quotaAllowedFormatted', 'actions']\n  public dataSource: MatTableDataSource<AccountListItemFormatted> = new MatTableDataSource()\n  public accountSubscription: Subscription\n\n  @ViewChild(MatSort, { static: false })\n  private set content(sort: MatSort) {\n    // Needed because of the ngif wrapper around the table\n    if (this.dataSource) {\n      this.dataSource.sort = sort\n    }\n  }\n\n  @ViewChild(MatPaginator, { static: true })\n  public paginator: MatPaginator\n\n  public ngOnInit(): void {\n    this.getAccounts()\n\n    this.dataSource.paginator = this.paginator\n\n    this.activatedRoute.params.subscribe((params): void => {\n      if (params['id']) {\n        this.accountDialog(params['id'])\n      }\n    })\n  }\n\n  public getAccounts(): void {\n    this.accountSubscription = this.accountsService.getAccounts().subscribe(\n      (accounts: AccountListItem[]): void => {\n        const accountsFormatted = accounts as AccountListItemFormatted[]\n\n        // Convert quota bytes to human readable\n        for (const accountFormatted of accountsFormatted) {\n          accountFormatted.quotaAllowedFormatted = formatBytes(accountFormatted.quota.allowed)\n          accountFormatted.quotaUsedFormatted = formatBytes(accountFormatted.quota.used)\n        }\n\n        this.dataSource.data = accountsFormatted\n        this.dataSource.sortingDataAccessor = (item, property): string | number => {\n          // Sort the number of bytes instead of the formatted string\n          switch (property) {\n            case 'quotaUsedFormatted':\n              return item.quota.used\n            case 'quotaAllowedFormatted':\n              return item.quota.allowed\n            default:\n              return item[property]\n          }\n        }\n      },\n      error => {\n        this.errorSnackbarService.open(error)\n      },\n    )\n  }\n\n  public applyFilter(filterValue: string): void {\n    this.dataSource.filter = filterValue.trim().toLowerCase()\n  }\n\n  public accountDialog(id?: string): void {\n    const dialogConfig: MatDialogConfig = {}\n    if (id) {\n      dialogConfig.data = { id: id }\n    }\n    const dialog = this.dialog.open(AccountDialogComponent, dialogConfig)\n    dialog.afterClosed().subscribe((result): void => {\n      this.router.navigateByUrl('/accounts/')\n      if (result) {\n        this.getAccounts()\n      }\n    })\n  }\n\n  public removeConfirmDialog(accountId: string, address?: string): void {\n    const dialogConfig: DialogConfig = {\n      data: {\n        title: `Remove ${address || accountId}`,\n        text: 'Are you sure? This will delete all messages in this account.',\n        buttons: [\n          {\n            options: {\n              active: false,\n              text: 'NO',\n            },\n          },\n          {\n            options: {\n              active: false,\n              text: 'YES',\n              buttonColor: 'warn',\n              spinnerSize: 18,\n              mode: 'indeterminate',\n            },\n            callback: (dialogRef: MatDialogRef<DialogComponent>): void => {\n              dialogRef.disableClose = true\n              dialogConfig.data.buttons[0].options.disabled = true\n              dialogConfig.data.buttons[1].options.active = true\n\n              this.accountsService.deleteAccount(accountId).subscribe(\n                (): void => {\n                  dialogRef.close()\n                  this.snackBar.open(`${address || accountId} has been removed`, undefined, {\n                    panelClass: 'success-snackbar',\n                  })\n                  this.getAccounts()\n                },\n                (error: HttpErrorResponse): void => {\n                  dialogRef.disableClose = false\n                  dialogConfig.data.buttons[0].options.disabled = false\n                  dialogConfig.data.buttons[1].options.active = false\n                  this.errorSnackbarService.open(error)\n                },\n              )\n            },\n          },\n        ],\n      },\n    }\n    this.dialog.open(DialogComponent, dialogConfig)\n  }\n}\n","export default \".row-container > mat-form-field {\\n  min-width: 0;\\n  width: 100%;\\n}\\n\\n.user-input-right {\\n  text-align: right;\\n}\\n\\n.at-symbol {\\n  padding-bottom: 1.34375em;\\n}\\n\\n.loader-container {\\n  width: 80vw;\\n  margin: 0 -24px;\\n  padding: 0 24px;\\n  box-sizing: border-box;\\n  max-width: 707.81px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3JhbWlyby9EZXYvRHVja3lQYW5lbC9zcmMvYXBwL3BhZ2VzL2FjY291bnRzL2NvbXBvbmVudHMvYWNjb3VudC1kaWFsb2cvYWNjb3VudC1kaWFsb2cuY29tcG9uZW50LnNjc3MiLCJzcmMvYXBwL3BhZ2VzL2FjY291bnRzL2NvbXBvbmVudHMvYWNjb3VudC1kaWFsb2cvYWNjb3VudC1kaWFsb2cuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxZQUFBO0VBQ0EsV0FBQTtBQ0NGOztBREVBO0VBQ0UsaUJBQUE7QUNDRjs7QURFQTtFQUNFLHlCQUFBO0FDQ0Y7O0FERUE7RUFDRSxXQUFBO0VBQ0EsZUFBQTtFQUNBLGVBQUE7RUFDQSxzQkFBQTtFQUNBLG1CQUFBO0FDQ0YiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy9hY2NvdW50cy9jb21wb25lbnRzL2FjY291bnQtZGlhbG9nL2FjY291bnQtZGlhbG9nLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnJvdy1jb250YWluZXIgPiBtYXQtZm9ybS1maWVsZCB7XG4gIG1pbi13aWR0aDogMDtcbiAgd2lkdGg6IDEwMCU7XG59XG5cbi51c2VyLWlucHV0LXJpZ2h0IHtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG59XG5cbi5hdC1zeW1ib2wge1xuICBwYWRkaW5nLWJvdHRvbTogMS4zNDM3NWVtO1xufVxuXG4ubG9hZGVyLWNvbnRhaW5lciB7XG4gIHdpZHRoOiA4MHZ3O1xuICBtYXJnaW46IDAgLTI0cHg7XG4gIHBhZGRpbmc6IDAgMjRweDtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgbWF4LXdpZHRoOiA3MDcuODFweDsgLy8gV2lkdGggb2YgdGhlIGVudGlyZSBmb3JtLiBTb3JyeSBmb3IgdGhlIG1hZ2ljIG51bWJlciwgSSBjb3VsZG4ndCBmaWd1cmUgb3V0IGhvdyB0byBnZXQgdG8gdGhpcyB2YWx1ZSBvdGhlcndpc2Vcbn0iLCIucm93LWNvbnRhaW5lciA+IG1hdC1mb3JtLWZpZWxkIHtcbiAgbWluLXdpZHRoOiAwO1xuICB3aWR0aDogMTAwJTtcbn1cblxuLnVzZXItaW5wdXQtcmlnaHQge1xuICB0ZXh0LWFsaWduOiByaWdodDtcbn1cblxuLmF0LXN5bWJvbCB7XG4gIHBhZGRpbmctYm90dG9tOiAxLjM0Mzc1ZW07XG59XG5cbi5sb2FkZXItY29udGFpbmVyIHtcbiAgd2lkdGg6IDgwdnc7XG4gIG1hcmdpbjogMCAtMjRweDtcbiAgcGFkZGluZzogMCAyNHB4O1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBtYXgtd2lkdGg6IDcwNy44MXB4O1xufSJdfQ== */\"","import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout'\nimport { HttpErrorResponse } from '@angular/common/http'\nimport { Component, Inject, OnInit } from '@angular/core'\nimport { FormControl, FormGroup, Validators } from '@angular/forms'\nimport { MAT_DIALOG_DATA, MatDialogRef, MatSnackBar } from '@angular/material'\nimport { AccountDetails, CreateAccountDto, EmailAccountsService, UpdateAccountDto } from 'ducky-api-client-angular'\nimport { MatProgressButtonOptions } from 'mat-progress-buttons'\nimport { Observable, Subscription } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { DomainsService } from 'src/app/pages/domains/domains.service'\nimport { ErrorSnackbarService } from 'src/app/shared/components/error-snackbar/error-snackbar.service'\nimport { AddressUsernameValidator } from 'src/app/shared/validators/address-username-validator.directive'\n\n@Component({\n  selector: 'app-account-dialog',\n  templateUrl: './account-dialog.component.html',\n  styleUrls: ['./account-dialog.component.scss'],\n})\nexport class AccountDialogComponent implements OnInit {\n  public constructor(\n    public dialogRef: MatDialogRef<AccountDialogComponent>,\n    private breakpointObserver: BreakpointObserver,\n    public readonly domainsService: DomainsService,\n    private readonly emailAccountsService: EmailAccountsService,\n    private snackBar: MatSnackBar,\n    private errorSnackbarService: ErrorSnackbarService,\n    @Inject(MAT_DIALOG_DATA) public data,\n  ) {}\n\n  public isModifyDialog: boolean\n  public accountDetails: AccountDetails\n  public accountDetailsSubscription: Subscription\n  public math: Math = Math\n\n  public isHandset$: Observable<boolean> = this.breakpointObserver\n    .observe(Breakpoints.Handset)\n    .pipe(map((result): boolean => result.matches))\n\n  public accountForm: FormGroup = new FormGroup({\n    name: new FormControl(null),\n    spamLevel: new FormControl(50, [Validators.min(0), Validators.max(100)]),\n    disabledScopes: new FormControl(null),\n    addressUser: new FormControl(null, AddressUsernameValidator()),\n    domain: new FormControl(null),\n    password: new FormControl(null, Validators.minLength(8)),\n    quota: new FormControl(null, Validators.min(0)),\n    sendLimit: new FormControl(null, [Validators.min(1), Validators.max(300)]),\n    receiveLimit: new FormControl(null, Validators.min(0)),\n    forwardLimit: new FormControl(null, [Validators.min(1), Validators.max(200)]),\n  })\n\n  public saveButtonConfig: MatProgressButtonOptions = {\n    active: false,\n    text: 'SAVE',\n    disabled: true,\n    raised: true,\n    buttonColor: 'primary',\n    spinnerColor: 'accent',\n    spinnerSize: 18,\n    mode: 'indeterminate',\n  }\n\n  public cancelButtonConfig: MatProgressButtonOptions = {\n    active: false,\n    type: 'button',\n    text: 'CANCEL',\n  }\n\n  public ngOnInit(): void {\n    this.accountForm.valueChanges.subscribe((): void => {\n      this.saveButtonConfig.disabled = this.accountForm.invalid || this.accountForm.pristine\n    })\n\n    // If id was passed this is a modify dialog, otherwise it is a create dialog\n    if (this.data) {\n      this.isModifyDialog = true\n      this.getAccount()\n    }\n  }\n\n  public forceCheckForm(): void {\n    if (this.accountForm.invalid) {\n      this.accountForm.markAllAsTouched()\n    }\n  }\n\n  public getAccount(): void {\n    this.accountForm.controls['addressUser'].disable()\n    this.accountForm.controls['domain'].disable()\n\n    this.accountDetailsSubscription = this.emailAccountsService.getAccountDetails(this.data.id).subscribe(\n      (account): void => {\n        this.accountDetails = account\n        // Split address to name and domain for split input\n        const addressUser = this.accountDetails.address.substring(0, this.accountDetails.address.lastIndexOf('@'))\n\n        this.accountForm.setValue({\n          name: account.name,\n          spamLevel: account.spamLevel,\n          disabledScopes: account.disabledScopes,\n          addressUser: addressUser,\n          domain: this.accountDetails.address.substring(this.accountDetails.address.lastIndexOf('@') + 1),\n          password: null,\n          quota: Math.round(account.limits.quota.allowed / 1024 ** 2),\n          sendLimit: account.limits.send.allowed,\n          receiveLimit: account.limits.receive.allowed,\n          forwardLimit: account.limits.forward.allowed,\n        })\n      },\n      (error: HttpErrorResponse): void => {\n        this.dialogRef.close()\n        this.errorSnackbarService.open(error)\n      },\n    )\n  }\n\n  public updateAccount(): void {\n    this.dialogRef.disableClose = true\n    this.cancelButtonConfig.disabled = true\n    this.saveButtonConfig.active = true\n\n    const dirtyValues: any = {}\n    for (const key in this.accountForm.controls) {\n      const value = this.accountForm.controls[key].value\n      if (this.accountForm.controls[key].dirty && value !== null && value !== '') {\n        dirtyValues[key] = value\n      }\n    }\n\n    const account: CreateAccountDto | UpdateAccountDto = {\n      name: dirtyValues.name,\n      spamLevel: dirtyValues.spamLevel,\n      disabledScopes: dirtyValues.disabledScopes,\n      address: dirtyValues.addressUser ? `${dirtyValues.addressUser}@${dirtyValues.domain}` : undefined,\n      password: dirtyValues.password,\n      limits: {\n        quota: dirtyValues.quota ? dirtyValues.quota * 1024 ** 2 : undefined,\n        send: dirtyValues.sendLimit,\n        receive: dirtyValues.receiveLimit,\n        forward: dirtyValues.forwardLimit,\n      },\n    }\n\n    const onError = (error: HttpErrorResponse): void => {\n      this.dialogRef.disableClose = false\n      this.cancelButtonConfig.disabled = false\n      this.saveButtonConfig.active = false\n      this.errorSnackbarService.open(error)\n    }\n\n    if (this.isModifyDialog) {\n      const address = `${this.accountForm.controls['addressUser'].value}@${this.accountForm.controls['domain'].value}`\n      delete account.address\n      this.emailAccountsService.updateAccount(this.data.id, account).subscribe((): void => {\n        this.snackBar.open(`${address} successfully updated`, undefined, {\n          panelClass: 'success-snackbar',\n        })\n        this.dialogRef.close(true)\n      }, onError)\n    } else {\n      this.emailAccountsService.createAccount(account).subscribe((): void => {\n        this.snackBar.open(`${account.address} successfully added`, undefined, {\n          panelClass: 'success-snackbar',\n        })\n        this.dialogRef.close(true)\n      }, onError)\n    }\n  }\n}\n","export default \".domain-field {\\n  width: 100%;\\n}\\n\\n.dns-card-title {\\n  margin-bottom: 0;\\n}\\n\\n.table-title {\\n  margin-bottom: 0;\\n}\\n\\n.dkim-content {\\n  word-break: break-all;\\n  padding-top: 15px;\\n  padding-bottom: 15px;\\n}\\n\\n.success-icon {\\n  color: green;\\n}\\n\\n.error-icon {\\n  color: red;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3JhbWlyby9EZXYvRHVja3lQYW5lbC9zcmMvYXBwL3BhZ2VzL2Rucy9kbnMuY29tcG9uZW50LnNjc3MiLCJzcmMvYXBwL3BhZ2VzL2Rucy9kbnMuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxXQUFBO0FDQ0Y7O0FERUE7RUFDRSxnQkFBQTtBQ0NGOztBREVBO0VBQ0UsZ0JBQUE7QUNDRjs7QURFQTtFQUNFLHFCQUFBO0VBQ0EsaUJBQUE7RUFDQSxvQkFBQTtBQ0NGOztBREVBO0VBQ0UsWUFBQTtBQ0NGOztBREVBO0VBQ0UsVUFBQTtBQ0NGIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvZG5zL2Rucy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5kb21haW4tZmllbGQge1xuICB3aWR0aDogMTAwJTtcbn1cblxuLmRucy1jYXJkLXRpdGxlIHtcbiAgbWFyZ2luLWJvdHRvbTogMDtcbn1cblxuLnRhYmxlLXRpdGxlIHtcbiAgbWFyZ2luLWJvdHRvbTogMDtcbn1cblxuLmRraW0tY29udGVudCB7XG4gIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbiAgcGFkZGluZy10b3A6IDE1cHg7XG4gIHBhZGRpbmctYm90dG9tOiAxNXB4O1xufVxuXG4uc3VjY2Vzcy1pY29uIHtcbiAgY29sb3I6IGdyZWVuO1xufVxuXG4uZXJyb3ItaWNvbiB7XG4gIGNvbG9yOiByZWQ7XG59IiwiLmRvbWFpbi1maWVsZCB7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4uZG5zLWNhcmQtdGl0bGUge1xuICBtYXJnaW4tYm90dG9tOiAwO1xufVxuXG4udGFibGUtdGl0bGUge1xuICBtYXJnaW4tYm90dG9tOiAwO1xufVxuXG4uZGtpbS1jb250ZW50IHtcbiAgd29yZC1icmVhazogYnJlYWstYWxsO1xuICBwYWRkaW5nLXRvcDogMTVweDtcbiAgcGFkZGluZy1ib3R0b206IDE1cHg7XG59XG5cbi5zdWNjZXNzLWljb24ge1xuICBjb2xvcjogZ3JlZW47XG59XG5cbi5lcnJvci1pY29uIHtcbiAgY29sb3I6IHJlZDtcbn0iXX0= */\"","import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout'\nimport { Component, OnInit } from '@angular/core'\nimport { FormControl, FormGroup } from '@angular/forms'\nimport { MatTableDataSource } from '@angular/material'\nimport {\n  DnsCheck,\n  DnsCheckError,\n  DnsCheckMxRecord,\n  DomainsService as ApiDomainsService,\n} from 'ducky-api-client-angular'\nimport { Observable, Subscription } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { ErrorSnackbarService } from 'src/app/shared/components/error-snackbar/error-snackbar.service'\n\nimport { DomainsService } from '../domains/domains.service'\nimport { DnsCheckTxtRecord } from './dns.interfaces'\n\n@Component({\n  selector: 'app-dns',\n  templateUrl: './dns.component.html',\n  styleUrls: ['./dns.component.scss'],\n})\nexport class DnsComponent implements OnInit {\n  public constructor(\n    private breakpointObserver: BreakpointObserver,\n    private apiDomainsService: ApiDomainsService,\n    public domainsService: DomainsService,\n    private errorSnackbarService: ErrorSnackbarService,\n  ) {}\n\n  public selectedDomain: string\n  public dnsCheck: DnsCheck\n  public dnsCheckSubscription: Subscription\n  public correctMxDataSource: MatTableDataSource<DnsCheckMxRecord> = new MatTableDataSource()\n  public correctMxDisplayedColumns = ['name', 'server', 'priority']\n  public correctTxtDataSource: MatTableDataSource<DnsCheckTxtRecord> = new MatTableDataSource()\n  public correctTxtDisplayedColumns = ['name', 'content']\n  public errorDataSource: MatTableDataSource<DnsCheckError> = new MatTableDataSource()\n  public errorDisplayedColumns = ['type', 'message']\n\n  public isHandset$: Observable<boolean> = this.breakpointObserver\n    .observe(Breakpoints.Handset)\n    .pipe(map((result): boolean => result.matches))\n\n  public domainForm: FormGroup = new FormGroup({\n    domain: new FormControl(null),\n  })\n\n  public ngOnInit(): void {\n    this.domainForm.controls['domain'].valueChanges.subscribe((value): void => {\n      this.selectedDomain = value\n      this.checkDNS(value)\n    })\n  }\n\n  public checkDNS(domain: string): void {\n    this.dnsCheckSubscription = this.apiDomainsService.checkDNS(domain).subscribe(\n      (dnsCheck): void => {\n        this.dnsCheck = dnsCheck\n        this.errorDataSource.data = dnsCheck.errors\n        this.correctMxDataSource.data = dnsCheck.correctValues.mx\n        this.correctTxtDataSource.data = []\n        this.correctTxtDataSource.data.push({\n          content: dnsCheck.correctValues.spf,\n        })\n        if (dnsCheck.correctValues.dkim) {\n          this.correctTxtDataSource.data.push({\n            content: dnsCheck.correctValues.dkim.value,\n            isDkim: true,\n          })\n        }\n      },\n      error => {\n        this.errorSnackbarService.open(error)\n      },\n    )\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2RvbWFpbnMvY29tcG9uZW50cy9hZGQtYWxpYXMtZGlhbG9nL2FkZC1hbGlhcy1kaWFsb2cuY29tcG9uZW50LnNjc3MifQ== */\"","import { HttpErrorResponse } from '@angular/common/http'\nimport { Component, Inject, OnInit } from '@angular/core'\nimport { FormControl, FormGroup, Validators } from '@angular/forms'\nimport { MAT_DIALOG_DATA, MatDialogRef, MatSnackBar } from '@angular/material'\nimport { DomainsService as ApiDomainsService } from 'ducky-api-client-angular'\nimport { MatProgressButtonOptions } from 'mat-progress-buttons'\nimport { ErrorSnackbarService } from 'src/app/shared/components/error-snackbar/error-snackbar.service'\n\nimport { DomainsService } from '../../domains.service'\n\n@Component({\n  selector: 'app-add-alias-dialog',\n  templateUrl: './add-alias-dialog.component.html',\n  styleUrls: ['./add-alias-dialog.component.scss'],\n})\nexport class AddAliasDialogComponent implements OnInit {\n  public constructor(\n    public dialogRef: MatDialogRef<AddAliasDialogComponent>,\n    private readonly apiDomainsService: ApiDomainsService,\n    public domainsService: DomainsService,\n    private snackBar: MatSnackBar,\n    private errorSnackbarService: ErrorSnackbarService,\n    @Inject(MAT_DIALOG_DATA) public data,\n  ) {}\n  public cancelButtonConfig: MatProgressButtonOptions = {\n    active: false,\n    type: 'button',\n    text: 'CANCEL',\n  }\n  public addButtonConfig: MatProgressButtonOptions = {\n    active: false,\n    disabled: true,\n    text: 'ADD',\n    raised: true,\n    buttonColor: 'primary',\n    spinnerColor: 'accent',\n    spinnerSize: 18,\n    mode: 'indeterminate',\n  }\n  public aliasForm = new FormGroup({\n    existingDomain: new FormControl(null),\n    aliasDomain: new FormControl(\n      '',\n      Validators.pattern(new RegExp('(?=^.{4,253}$)(^((?!-)[a-zA-Z0-9-]{0,62}[a-zA-Z0-9]\\\\.)+[a-zA-Z]{2,63}$)')),\n    ),\n  })\n\n  public ngOnInit(): void {\n    this.aliasForm.valueChanges.subscribe((): void => {\n      if (this.domainsService.domainsSubscription.closed) {\n        this.addButtonConfig.disabled = this.aliasForm.invalid\n      }\n    })\n  }\n\n  public addAlias(): void {\n    this.dialogRef.disableClose = true\n    this.cancelButtonConfig.disabled = true\n    this.addButtonConfig.active = true\n\n    this.apiDomainsService\n      .addAlias(this.aliasForm.controls['existingDomain'].value, {\n        domain: this.aliasForm.controls['aliasDomain'].value,\n      })\n      .subscribe(\n        (): void => {\n          this.dialogRef.close(true)\n          this.snackBar.open(`${this.aliasForm.controls['aliasDomain'].value} successfully added`, undefined, {\n            panelClass: 'success-snackbar',\n          })\n        },\n        (error: HttpErrorResponse): void => {\n          this.dialogRef.disableClose = false\n          this.cancelButtonConfig.disabled = false\n          this.addButtonConfig.active = false\n          this.errorSnackbarService.open(error)\n        },\n      )\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2RvbWFpbnMvY29tcG9uZW50cy9hZGQtZG9tYWluLWRpYWxvZy9hZGQtZG9tYWluLWRpYWxvZy5jb21wb25lbnQuc2NzcyJ9 */\"","import { HttpErrorResponse } from '@angular/common/http'\nimport { Component, Inject, OnInit } from '@angular/core'\nimport { FormControl, Validators } from '@angular/forms'\nimport { MAT_DIALOG_DATA, MatDialogRef, MatSnackBar } from '@angular/material'\nimport { DomainsService } from 'ducky-api-client-angular'\nimport { MatProgressButtonOptions } from 'mat-progress-buttons'\nimport { ErrorSnackbarService } from 'src/app/shared/components/error-snackbar/error-snackbar.service'\n\n@Component({\n  selector: 'app-add-domain-dialog',\n  templateUrl: './add-domain-dialog.component.html',\n  styleUrls: ['./add-domain-dialog.component.scss'],\n})\nexport class AddDomainDialogComponent implements OnInit {\n  public constructor(\n    public dialogRef: MatDialogRef<AddDomainDialogComponent>,\n    private readonly domainsService: DomainsService,\n    private snackBar: MatSnackBar,\n    private errorSnackbarService: ErrorSnackbarService,\n    @Inject(MAT_DIALOG_DATA) public data,\n  ) {}\n\n  public cancelButtonConfig: MatProgressButtonOptions = {\n    active: false,\n    type: 'button',\n    text: 'CANCEL',\n  }\n  public addButtonConfig: MatProgressButtonOptions = {\n    active: false,\n    disabled: true,\n    text: 'ADD',\n    raised: true,\n    buttonColor: 'primary',\n    spinnerColor: 'accent',\n    spinnerSize: 18,\n    mode: 'indeterminate',\n  }\n  public domainInput = new FormControl(\n    '',\n    Validators.pattern(new RegExp('(?=^.{4,253}$)(^((?!-)[a-zA-Z0-9-]{0,62}[a-zA-Z0-9]\\\\.)+[a-zA-Z]{2,63}$)')), // valid fqdn\n  )\n\n  public ngOnInit(): void {\n    this.domainInput.valueChanges.subscribe((): void => {\n      this.addButtonConfig.disabled = this.domainInput.invalid\n    })\n  }\n\n  public addDomain(): void {\n    this.dialogRef.disableClose = true\n    this.cancelButtonConfig.disabled = true\n    this.addButtonConfig.active = true\n\n    this.domainsService.addDomain({ domain: this.domainInput.value }).subscribe(\n      (): void => {\n        this.dialogRef.close(true)\n        this.snackBar.open(`${this.domainInput.value} successfully added`, undefined, {\n          panelClass: 'success-snackbar',\n        })\n      },\n      (error: HttpErrorResponse): void => {\n        this.dialogRef.disableClose = false\n        this.cancelButtonConfig.disabled = false\n        this.addButtonConfig.active = false\n        this.errorSnackbarService.open(error)\n      },\n    )\n  }\n}\n","export default \".text-area,\\n.loader {\\n  width: 400px;\\n  max-width: 100%;\\n}\\n.text-area textarea,\\n.loader textarea {\\n  max-height: 40vh;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3JhbWlyby9EZXYvRHVja3lQYW5lbC9zcmMvYXBwL3BhZ2VzL2RvbWFpbnMvY29tcG9uZW50cy9ka2ltLWRpYWxvZy9ka2ltLWRpYWxvZy5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvcGFnZXMvZG9tYWlucy9jb21wb25lbnRzL2RraW0tZGlhbG9nL2RraW0tZGlhbG9nLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztFQUVFLFlBQUE7RUFDQSxlQUFBO0FDQ0Y7QURDRTs7RUFDRSxnQkFBQTtBQ0VKIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvZG9tYWlucy9jb21wb25lbnRzL2RraW0tZGlhbG9nL2RraW0tZGlhbG9nLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnRleHQtYXJlYSxcbi5sb2FkZXIge1xuICB3aWR0aDogNDAwcHg7XG4gIG1heC13aWR0aDogMTAwJTtcblxuICB0ZXh0YXJlYSB7XG4gICAgbWF4LWhlaWdodDogNDB2aDtcbiAgfVxufVxuIiwiLnRleHQtYXJlYSxcbi5sb2FkZXIge1xuICB3aWR0aDogNDAwcHg7XG4gIG1heC13aWR0aDogMTAwJTtcbn1cbi50ZXh0LWFyZWEgdGV4dGFyZWEsXG4ubG9hZGVyIHRleHRhcmVhIHtcbiAgbWF4LWhlaWdodDogNDB2aDtcbn0iXX0= */\"","import { HttpErrorResponse } from '@angular/common/http'\nimport { Component, Inject, OnInit } from '@angular/core'\nimport { FormControl, FormGroup } from '@angular/forms'\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef, MatSnackBar } from '@angular/material'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { AddDkimDto, DkimService } from 'ducky-api-client-angular'\nimport { MatProgressButtonOptions } from 'mat-progress-buttons'\nimport { Subscription } from 'rxjs'\nimport { AccountDialogComponent } from 'src/app/pages/accounts/components/account-dialog/account-dialog.component'\nimport { DialogComponent } from 'src/app/shared/components/dialog/dialog.component'\nimport { DialogConfig } from 'src/app/shared/components/dialog/dialog.interfaces'\nimport { ErrorSnackbarService } from 'src/app/shared/components/error-snackbar/error-snackbar.service'\n\nimport { DomainsService } from '../../domains.service'\n\n@Component({\n  selector: 'app-dkim-dialog',\n  templateUrl: './dkim-dialog.component.html',\n  styleUrls: ['./dkim-dialog.component.scss'],\n})\nexport class DkimDialogComponent implements OnInit {\n  public constructor(\n    public dialogRef: MatDialogRef<AccountDialogComponent>,\n    public dialog: MatDialog,\n    private dkimService: DkimService,\n    private snackBar: MatSnackBar,\n    private errorSnackbarService: ErrorSnackbarService,\n    @Inject(MAT_DIALOG_DATA)\n    public data,\n  ) {}\n  public isModifyDialog: boolean\n  public dkimForm: FormGroup = new FormGroup({\n    selector: new FormControl(null),\n    privateKey: new FormControl(null),\n  })\n  public dkimKeySubscription: Subscription\n\n  public saveButtonConfig: MatProgressButtonOptions = {\n    active: false,\n    text: 'SAVE',\n    disabled: true,\n    raised: true,\n    buttonColor: 'primary',\n    spinnerColor: 'accent',\n    spinnerSize: 18,\n    mode: 'indeterminate',\n  }\n\n  public disableButtonConfig: MatProgressButtonOptions = {\n    active: false,\n    type: 'button',\n    text: 'DISABLE',\n    buttonColor: 'warn',\n    spinnerColor: 'accent',\n    spinnerSize: 18,\n    mode: 'indeterminate',\n  }\n\n  public cancelButtonConfig: MatProgressButtonOptions = {\n    active: false,\n    type: 'button',\n    text: 'CANCEL',\n  }\n\n  public ngOnInit(): void {\n    this.dkimForm.valueChanges.subscribe((): void => {\n      if (!this.isModifyDialog || this.dkimKeySubscription.closed) {\n        this.saveButtonConfig.disabled = this.dkimForm.invalid || this.dkimForm.pristine\n      }\n    })\n\n    if (this.data.edit) {\n      this.getDkim()\n      this.isModifyDialog = true\n    }\n  }\n\n  public getDkim(): void {\n    this.dkimKeySubscription = this.dkimService.getDkim(this.data.domain).subscribe(\n      (dkimKey): void => {\n        this.dkimForm.setValue({\n          selector: dkimKey.selector,\n          privateKey: null,\n        })\n      },\n      (error: HttpErrorResponse): void => {\n        this.dialogRef.close()\n        this.errorSnackbarService.open(error)\n      },\n    )\n  }\n\n  public updateDkim(): void {\n    this.dialogRef.disableClose = true\n    this.cancelButtonConfig.disabled = true\n    this.saveButtonConfig.active = true\n\n    const dirtyValues: any = {}\n    for (const key in this.dkimForm.controls) {\n      const value = this.dkimForm.controls[key].value\n      if (this.dkimForm.controls[key].dirty && value !== null && value !== '') {\n        dirtyValues[key] = value\n      }\n    }\n\n    const dkimKey: AddDkimDto = {\n      selector: dirtyValues.selector,\n      privateKey: dirtyValues.privateKey,\n    }\n\n    this.dkimService.updateDkim(this.data.domain, dkimKey).subscribe(\n      (): void => {\n        this.dialogRef.close(true)\n        this.snackBar.open(`DKIM for ${this.data.domain} ${this.isModifyDialog ? 'updated' : 'enabled'}`, undefined, {\n          panelClass: 'success-snackbar',\n        })\n      },\n      (error: HttpErrorResponse): void => {\n        this.dialogRef.disableClose = false\n        this.cancelButtonConfig.disabled = false\n        this.saveButtonConfig.active = false\n        this.errorSnackbarService.open(error)\n      },\n    )\n  }\n\n  public forceCheckForm(): void {\n    if (this.dkimForm.invalid) {\n      this.dkimForm.markAllAsTouched()\n    }\n  }\n\n  public disableDialog(): void {\n    const dialogConfig: DialogConfig = {\n      data: {\n        title: `Disable DKIM for ${this.data.domain}`,\n        text: 'Are you sure? This will also delete the private key from the server.',\n        buttons: [\n          {\n            options: {\n              active: false,\n              text: 'NO',\n            },\n          },\n          {\n            options: {\n              active: false,\n              text: 'YES',\n              buttonColor: 'warn',\n              spinnerSize: 18,\n              mode: 'indeterminate',\n            },\n            callback: (dialogRef: MatDialogRef<DialogComponent>): void => {\n              dialogRef.disableClose = true\n              dialogConfig.data.buttons[0].options.disabled = true\n              dialogConfig.data.buttons[1].options.active = true\n\n              this.dkimService.deleteDkim(this.data.domain).subscribe(\n                (): void => {\n                  dialogRef.close()\n                  this.snackBar.open(`DKIM for ${this.data.domain} has been disabled`, undefined, {\n                    panelClass: 'success-snackbar',\n                  })\n                  this.dialogRef.close(true)\n                },\n                (error: HttpErrorResponse): void => {\n                  dialogRef.disableClose = false\n                  dialogConfig.data.buttons[0].options.disabled = false\n                  dialogConfig.data.buttons[1].options.active = false\n                  this.errorSnackbarService.open(error)\n                },\n              )\n            },\n          },\n        ],\n      },\n    }\n    this.dialog.open(DialogComponent, dialogConfig)\n  }\n}\n\n@Component({\n  template: '',\n})\nexport class DkimDialogEntryComponent implements OnInit {\n  public constructor(\n    public dialog: MatDialog,\n    private router: Router,\n    private route: ActivatedRoute,\n    public domainService: DomainsService,\n  ) {}\n  public ngOnInit(): void {\n    this.route.params.subscribe((params): void => {\n      this.dkimDialog(params['domain'], params['action'] === 'edit')\n    })\n  }\n\n  public dkimDialog(domain: string, edit = false): void {\n    const dialog = this.dialog.open(DkimDialogComponent, {\n      data: {\n        domain: domain,\n        edit: edit,\n      },\n    })\n    dialog.afterClosed().subscribe((result): void => {\n      if (result) {\n        this.domainService.getDomains()\n        this.router.navigateByUrl('/domains')\n      } else {\n        this.router.navigateByUrl('/domains')\n      }\n    })\n  }\n}\n","export default \".mat-column-actions {\\n  -webkit-box-flex: 0;\\n          flex: 0 0 80px;\\n}\\n\\n.mat-column-actions.mat-header-cell {\\n  -webkit-box-pack: center;\\n          justify-content: center;\\n}\\n\\n.grayed-out {\\n  color: #cfcfcf;\\n}\\n\\n.overlap-icon {\\n  margin-left: -24px;\\n}\\n\\neco-fab-speed-dial {\\n  position: fixed;\\n  right: 30px;\\n  bottom: 30px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3JhbWlyby9EZXYvRHVja3lQYW5lbC9zcmMvYXBwL3BhZ2VzL2RvbWFpbnMvZG9tYWlucy5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvcGFnZXMvZG9tYWlucy9kb21haW5zLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0VBQ0UsbUJBQUE7VUFBQSxjQUFBO0FDQUY7O0FESUE7RUFDRSx3QkFBQTtVQUFBLHVCQUFBO0FDREY7O0FESUE7RUFDRSxjQUFBO0FDREY7O0FESUE7RUFDRSxrQkFBQTtBQ0RGOztBRElBO0VBQ0UsZUFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0FDREYiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy9kb21haW5zL2RvbWFpbnMuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBbGlnbiBhY3Rpb25zIGNvbGx1bW4gdG8gdGhlIHJpZ2h0XG4ubWF0LWNvbHVtbi1hY3Rpb25zIHtcbiAgZmxleDogMCAwIDgwcHhcbn1cblxuLy8gQWxpZ24gYWN0aW9ucyBjb2x1bW4gY2VudGVyXG4ubWF0LWNvbHVtbi1hY3Rpb25zLm1hdC1oZWFkZXItY2VsbCB7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xufVxuXG4uZ3JheWVkLW91dCB7XG4gIGNvbG9yOiAjY2ZjZmNmO1xufVxuXG4ub3ZlcmxhcC1pY29uIHtcbiAgbWFyZ2luLWxlZnQ6IC0yNHB4XG59XG5cbmVjby1mYWItc3BlZWQtZGlhbCB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgcmlnaHQ6IDMwcHg7XG4gIGJvdHRvbTogMzBweDtcbn0iLCIubWF0LWNvbHVtbi1hY3Rpb25zIHtcbiAgZmxleDogMCAwIDgwcHg7XG59XG5cbi5tYXQtY29sdW1uLWFjdGlvbnMubWF0LWhlYWRlci1jZWxsIHtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG5cbi5ncmF5ZWQtb3V0IHtcbiAgY29sb3I6ICNjZmNmY2Y7XG59XG5cbi5vdmVybGFwLWljb24ge1xuICBtYXJnaW4tbGVmdDogLTI0cHg7XG59XG5cbmVjby1mYWItc3BlZWQtZGlhbCB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgcmlnaHQ6IDMwcHg7XG4gIGJvdHRvbTogMzBweDtcbn0iXX0= */\"","import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout'\nimport { HttpErrorResponse } from '@angular/common/http'\nimport { Component, OnInit } from '@angular/core'\nimport { MatDialog, MatDialogRef, MatSnackBar, MatTableDataSource } from '@angular/material'\nimport { Router } from '@angular/router'\nimport { Domain, DomainsService as ApiDomainsService } from 'ducky-api-client-angular'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { DialogComponent } from 'src/app/shared/components/dialog/dialog.component'\nimport { DialogConfig } from 'src/app/shared/components/dialog/dialog.interfaces'\nimport { ErrorSnackbarService } from 'src/app/shared/components/error-snackbar/error-snackbar.service'\n\nimport { AddAliasDialogComponent } from './components/add-alias-dialog/add-alias-dialog.component'\nimport { AddDomainDialogComponent } from './components/add-domain-dialog/add-domain-dialog.component'\nimport { DomainsService } from './domains.service'\n\n@Component({\n  selector: 'app-domains',\n  templateUrl: './domains.component.html',\n  styleUrls: ['./domains.component.scss'],\n})\nexport class DomainsComponent implements OnInit {\n  public constructor(\n    private breakpointObserver: BreakpointObserver,\n    public dialog: MatDialog,\n    private snackBar: MatSnackBar,\n    private errorSnackbarService: ErrorSnackbarService,\n    private readonly apiDomainsService: ApiDomainsService,\n    public domainsService: DomainsService,\n    private router: Router,\n  ) {}\n\n  public displayedColumns = ['domain', 'actions']\n  public dataSource: MatTableDataSource<Domain>\n  public isHandset$: Observable<boolean> = this.breakpointObserver\n    .observe(Breakpoints.Handset)\n    .pipe(map((result): boolean => result.matches))\n\n  public ngOnInit(): void {\n    this.domainsService.domainsSubscription.add(() => {\n      this.dataSource = new MatTableDataSource(this.domainsService.domainsAndAliases)\n    })\n    this.domainsService.domainsAndAliasesSubject.subscribe(domainsAndAliases => {\n      this.dataSource.data = domainsAndAliases\n    })\n  }\n\n  public addDomainDialog(): void {\n    const dialog = this.dialog.open(AddDomainDialogComponent)\n    dialog.afterClosed().subscribe((result): void => {\n      if (result) {\n        this.domainsService.getDomains()\n      }\n    })\n  }\n\n  public addAliasDialog(): void {\n    const dialog = this.dialog.open(AddAliasDialogComponent)\n    dialog.afterClosed().subscribe((result): void => {\n      if (result) {\n        this.domainsService.getDomains()\n      }\n    })\n  }\n\n  public removeDomainConfirmDialog(domain: string): void {\n    const dialogConfig: DialogConfig = {\n      data: {\n        title: `Remove ${domain}`,\n        text: 'Are you sure? This will also remove accounts associated with this domain.',\n        buttons: [\n          {\n            options: {\n              active: false,\n              text: 'NO',\n            },\n          },\n          {\n            options: {\n              active: false,\n              text: 'YES',\n              buttonColor: 'warn',\n              spinnerSize: 18,\n              mode: 'indeterminate',\n            },\n            callback: (dialogRef: MatDialogRef<DialogComponent>): void => {\n              dialogRef.disableClose = true\n              dialogConfig.data.buttons[0].options.disabled = true\n              dialogConfig.data.buttons[1].options.active = true\n\n              this.apiDomainsService.deleteDomain(domain).subscribe(\n                (): void => {\n                  dialogRef.close()\n                  this.snackBar.open(`${domain} has been removed`, undefined, { panelClass: 'success-snackbar' })\n                  this.domainsService.getDomains()\n                },\n                (error: HttpErrorResponse): void => {\n                  dialogRef.close()\n                  this.errorSnackbarService.open(error)\n                },\n              )\n            },\n          },\n        ],\n      },\n    }\n    this.dialog.open(DialogComponent, dialogConfig)\n  }\n\n  public removeAliasConfirmDialog(domain: string, alias: string): void {\n    const dialogConfig: DialogConfig = {\n      data: {\n        title: `Remove ${alias}`,\n        text: 'Are you sure? Any account data will remain as this is just an alias.',\n        buttons: [\n          {\n            options: {\n              active: false,\n              text: 'NO',\n            },\n          },\n          {\n            options: {\n              active: false,\n              text: 'YES',\n              buttonColor: 'warn',\n              spinnerSize: 18,\n              mode: 'indeterminate',\n            },\n            callback: (dialogRef: MatDialogRef<DialogComponent>): void => {\n              dialogRef.disableClose = true\n              dialogConfig.data.buttons[0].options.disabled = true\n              dialogConfig.data.buttons[1].options.active = true\n\n              this.apiDomainsService.deleteAlias(domain, alias).subscribe(\n                (): void => {\n                  dialogRef.close()\n                  this.snackBar.open(`${alias} has been removed`, undefined, { panelClass: 'success-snackbar' })\n                  this.domainsService.getDomains()\n                },\n                (error: HttpErrorResponse): void => {\n                  dialogRef.close()\n                  this.errorSnackbarService.open(error)\n                },\n              )\n            },\n          },\n        ],\n      },\n    }\n    this.dialog.open(DialogComponent, dialogConfig)\n  }\n}\n","import { Injectable } from '@angular/core'\nimport { Domain, DomainsService as ApiDomainsService } from 'ducky-api-client-angular'\nimport { Subject, Subscription } from 'rxjs'\nimport { ErrorSnackbarService } from 'src/app/shared/components/error-snackbar/error-snackbar.service'\n\nimport { DomainWithAliasParentInfo } from './domains.interfaces'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DomainsService {\n  constructor(private errorSnackbarService: ErrorSnackbarService, private apiDomainsService: ApiDomainsService) {}\n\n  public domainsSubscription: Subscription\n  public domains: Domain[]\n  public domainsStrings: string[]\n  public domainsAndAliases: DomainWithAliasParentInfo[]\n  public domainsAndAliasesSubject: Subject<DomainWithAliasParentInfo[]> = new Subject()\n  public domainsAndAliasesStrings: string[]\n\n  public getDomains(): void {\n    this.domainsSubscription = this.apiDomainsService.getDomains().subscribe(\n      (domains: Domain[]): void => {\n        this.domains = domains\n        this.domainsStrings = domains.map((value): string => value.domain)\n\n        // Assert domains as a different type so we can add \"aliasOf\"\n        const assertedDomains = domains as DomainWithAliasParentInfo[]\n        const domainsAndAliases: DomainWithAliasParentInfo[] = []\n\n        for (const domain of assertedDomains) {\n          domainsAndAliases.push(domain)\n          if (domain.aliases && domain.aliases.length > 0) {\n            for (const alias of domain.aliases) {\n              alias.aliasOf = domain.domain\n              domainsAndAliases.push(alias)\n            }\n          }\n        }\n\n        this.domainsAndAliases = domainsAndAliases\n        this.domainsAndAliasesSubject.next(domainsAndAliases)\n        this.domainsAndAliasesStrings = domainsAndAliases.map((value): string => value.domain)\n      },\n      error => {\n        this.errorSnackbarService.open(error)\n      },\n    )\n  }\n}\n","export default \".row-container > mat-form-field {\\n  min-width: 0;\\n  width: 100%;\\n}\\n\\n.user-input-right {\\n  text-align: right;\\n}\\n\\n.at-symbol {\\n  padding-bottom: 1.34375em;\\n}\\n\\n.loader-container {\\n  width: 80vw;\\n  margin: 0 -24px;\\n  padding: 0 24px;\\n  box-sizing: border-box;\\n  max-width: 490.38px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3JhbWlyby9EZXYvRHVja3lQYW5lbC9zcmMvYXBwL3BhZ2VzL2ZvcndhcmRlcnMvY29tcG9uZW50cy9mb3J3YXJkZXItZGlhbG9nL2ZvcndhcmRlci1kaWFsb2cuY29tcG9uZW50LnNjc3MiLCJzcmMvYXBwL3BhZ2VzL2ZvcndhcmRlcnMvY29tcG9uZW50cy9mb3J3YXJkZXItZGlhbG9nL2ZvcndhcmRlci1kaWFsb2cuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxZQUFBO0VBQ0EsV0FBQTtBQ0NGOztBREVBO0VBQ0UsaUJBQUE7QUNDRjs7QURFQTtFQUNFLHlCQUFBO0FDQ0Y7O0FERUE7RUFDRSxXQUFBO0VBQ0EsZUFBQTtFQUNBLGVBQUE7RUFDQSxzQkFBQTtFQUNBLG1CQUFBO0FDQ0YiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy9mb3J3YXJkZXJzL2NvbXBvbmVudHMvZm9yd2FyZGVyLWRpYWxvZy9mb3J3YXJkZXItZGlhbG9nLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnJvdy1jb250YWluZXIgPiBtYXQtZm9ybS1maWVsZCB7XG4gIG1pbi13aWR0aDogMDtcbiAgd2lkdGg6IDEwMCU7XG59XG5cbi51c2VyLWlucHV0LXJpZ2h0IHtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG59XG5cbi5hdC1zeW1ib2wge1xuICBwYWRkaW5nLWJvdHRvbTogMS4zNDM3NWVtO1xufVxuXG4ubG9hZGVyLWNvbnRhaW5lciB7XG4gIHdpZHRoOiA4MHZ3O1xuICBtYXJnaW46IDAgLTI0cHg7XG4gIHBhZGRpbmc6IDAgMjRweDtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgbWF4LXdpZHRoOiA0OTAuMzhweDsgLy8gV2lkdGggb2YgdGhlIGVudGlyZSBmb3JtLiBTb3JyeSBmb3IgdGhlIG1hZ2ljIG51bWJlciwgSSBjb3VsZG4ndCBmaWd1cmUgb3V0IGhvdyB0byBnZXQgdG8gdGhpcyB2YWx1ZSBvdGhlcndpc2Vcbn0iLCIucm93LWNvbnRhaW5lciA+IG1hdC1mb3JtLWZpZWxkIHtcbiAgbWluLXdpZHRoOiAwO1xuICB3aWR0aDogMTAwJTtcbn1cblxuLnVzZXItaW5wdXQtcmlnaHQge1xuICB0ZXh0LWFsaWduOiByaWdodDtcbn1cblxuLmF0LXN5bWJvbCB7XG4gIHBhZGRpbmctYm90dG9tOiAxLjM0Mzc1ZW07XG59XG5cbi5sb2FkZXItY29udGFpbmVyIHtcbiAgd2lkdGg6IDgwdnc7XG4gIG1hcmdpbjogMCAtMjRweDtcbiAgcGFkZGluZzogMCAyNHB4O1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBtYXgtd2lkdGg6IDQ5MC4zOHB4O1xufSJdfQ== */\"","import { COMMA, ENTER, SPACE } from '@angular/cdk/keycodes'\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout'\nimport { HttpErrorResponse } from '@angular/common/http'\nimport { Component, Inject, OnInit } from '@angular/core'\nimport { FormControl, FormGroup, Validators } from '@angular/forms'\nimport { MAT_DIALOG_DATA, MatChipInputEvent, MatDialogRef, MatSnackBar } from '@angular/material'\nimport { CreateForwarderDto, ForwarderDetails, ForwardersService } from 'ducky-api-client-angular'\nimport { MatProgressButtonOptions } from 'mat-progress-buttons'\nimport { Observable, Subscription } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { AccountDialogComponent } from 'src/app/pages/accounts/components/account-dialog/account-dialog.component'\nimport { DomainsService } from 'src/app/pages/domains/domains.service'\nimport { ErrorSnackbarService } from 'src/app/shared/components/error-snackbar/error-snackbar.service'\nimport { AddressUsernameValidator } from 'src/app/shared/validators/address-username-validator.directive'\nimport { forwardingTargetValidator } from 'src/app/shared/validators/forwarding-target-validator.directive'\n\n@Component({\n  selector: 'app-forwarder-dialog',\n  templateUrl: './forwarder-dialog.component.html',\n  styleUrls: ['./forwarder-dialog.component.scss'],\n})\nexport class ForwarderDialogComponent implements OnInit {\n  public constructor(\n    public dialogRef: MatDialogRef<AccountDialogComponent>,\n    private breakpointObserver: BreakpointObserver,\n    public readonly domainsService: DomainsService,\n    private readonly forwardersService: ForwardersService,\n    private snackBar: MatSnackBar,\n    private errorSnackbarService: ErrorSnackbarService,\n    @Inject(MAT_DIALOG_DATA) public data,\n  ) {}\n  public isModifyDialog: boolean\n  public forwarderDetails: ForwarderDetails\n  public forwarderDetailsSubscription: Subscription\n  public forwardTargets: string[] = []\n  public forwardTargetsDirty = false\n  public readonly newTargetSeperators: number[] = [ENTER, COMMA, SPACE]\n\n  public isHandset$: Observable<boolean> = this.breakpointObserver\n    .observe(Breakpoints.Handset)\n    .pipe(map((result): boolean => result.matches))\n\n  public forwarderForm: FormGroup = new FormGroup({\n    name: new FormControl(null),\n    addressUser: new FormControl(null, AddressUsernameValidator()),\n    domain: new FormControl(null),\n    newTarget: new FormControl(null, forwardingTargetValidator()),\n    forwardLimit: new FormControl(null, [Validators.min(1), Validators.max(200)]),\n  })\n\n  public saveButtonConfig: MatProgressButtonOptions = {\n    active: false,\n    text: 'SAVE',\n    disabled: true,\n    raised: true,\n    buttonColor: 'primary',\n    spinnerColor: 'accent',\n    spinnerSize: 18,\n    mode: 'indeterminate',\n  }\n\n  public cancelButtonConfig: MatProgressButtonOptions = {\n    active: false,\n    type: 'button',\n    text: 'CANCEL',\n  }\n\n  public ngOnInit(): void {\n    this.forwarderForm.valueChanges.subscribe((): void => {\n      if (this.forwarderForm.dirty && this.forwarderForm.valid) {\n        this.saveButtonConfig.disabled = false\n      } else {\n        this.saveButtonConfig.disabled = true\n      }\n    })\n\n    // If id was passed this is a modify dialog and we need to get existing data\n    if (this.data) {\n      this.isModifyDialog = true\n      this.getForwarder()\n    }\n  }\n\n  public addTarget(event: MatChipInputEvent): void {\n    if (this.forwarderForm.controls['newTarget'].valid) {\n      if ((event.value || '').trim()) {\n        this.forwardTargetsDirty = true\n        this.forwardTargets.push(event.value.trim())\n      }\n\n      // Reset the input value\n      if (event.input) {\n        this.forwarderForm.controls['newTarget'].setValue('')\n        this.forwarderForm.controls['newTarget'].markAsUntouched()\n      }\n    } else {\n      this.forwarderForm.controls['newTarget'].markAsTouched()\n    }\n  }\n\n  public removeTarget(target: string): void {\n    const index = this.forwardTargets.indexOf(target)\n\n    if (index >= 0) {\n      this.forwardTargetsDirty = true\n      this.forwarderForm.controls['newTarget'].markAsDirty()\n      this.forwarderForm.controls['newTarget'].markAsTouched()\n      this.saveButtonConfig.disabled = false\n      this.forwardTargets.splice(index, 1)\n    }\n  }\n\n  public forceCheckForm(): void {\n    if (this.forwarderForm.invalid) {\n      this.forwarderForm.markAllAsTouched()\n    }\n  }\n\n  public getForwarder(): void {\n    this.forwarderDetailsSubscription = this.forwardersService.getForwarderDetails(this.data.id).subscribe(\n      (forwarder): void => {\n        this.forwarderDetails = forwarder\n        // Split address to name and domain for split input\n        const addressUser = this.forwarderDetails.address.substring(0, this.forwarderDetails.address.lastIndexOf('@'))\n        const domain = this.forwarderDetails.address.substring(this.forwarderDetails.address.lastIndexOf('@') + 1)\n\n        this.forwarderForm.setValue({\n          name: forwarder.name ? forwarder.name : null, // If name is false then don't fill name field\n          addressUser: addressUser,\n          domain: domain,\n          newTarget: null,\n          forwardLimit: forwarder.limits.forward.allowed,\n        })\n        this.forwardTargets = forwarder.targets\n      },\n      (error: HttpErrorResponse): void => {\n        this.dialogRef.close()\n        this.errorSnackbarService.open(error)\n      },\n    )\n  }\n\n  public updateForwarder(): void {\n    this.dialogRef.disableClose = true\n    this.cancelButtonConfig.disabled = true\n    this.saveButtonConfig.active = true\n\n    const dirtyValues: any = {}\n    for (const key in this.forwarderForm.controls) {\n      const value = this.forwarderForm.controls[key].value\n      if (this.forwarderForm.controls[key].dirty && value !== null && value !== '') {\n        dirtyValues[key] = value\n      }\n    }\n\n    const address = `${this.forwarderForm.controls['addressUser'].value}@${this.forwarderForm.controls['domain'].value}`\n    let dirtyAddress: string\n    if (dirtyValues.addressUser || dirtyValues.domain) {\n      dirtyAddress = `${this.forwarderForm.controls['addressUser'].value}@${this.forwarderForm.controls['domain'].value}`\n    }\n\n    const forwarder: CreateForwarderDto = {\n      name: dirtyValues.name,\n      address: dirtyAddress,\n      targets: this.forwardTargetsDirty ? this.forwardTargets : undefined,\n      limits: {\n        forward: dirtyValues.forwardLimit,\n      },\n    }\n\n    const onError = (error: HttpErrorResponse): void => {\n      this.dialogRef.disableClose = false\n      this.cancelButtonConfig.disabled = false\n      this.saveButtonConfig.active = false\n      this.errorSnackbarService.open(error)\n    }\n\n    if (this.isModifyDialog) {\n      this.forwardersService.updateForwarder(this.data.id, forwarder).subscribe((): void => {\n        this.snackBar.open(`${address} successfully updated`, undefined, {\n          panelClass: 'success-snackbar',\n        })\n        this.dialogRef.close(true)\n      }, onError)\n    } else {\n      this.forwardersService.createForwarder(forwarder).subscribe((): void => {\n        this.snackBar.open(`${address} successfully added`, undefined, {\n          panelClass: 'success-snackbar',\n        })\n        this.dialogRef.close(true)\n      }, onError)\n    }\n  }\n}\n","export default \".mat-column-actions {\\n  -webkit-box-flex: 0;\\n          flex: 0 0 80px;\\n}\\n\\n.mat-column-actions.mat-header-cell {\\n  -webkit-box-pack: center;\\n          justify-content: center;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3JhbWlyby9EZXYvRHVja3lQYW5lbC9zcmMvYXBwL3BhZ2VzL2ZvcndhcmRlcnMvZm9yd2FyZGVycy5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvcGFnZXMvZm9yd2FyZGVycy9mb3J3YXJkZXJzLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0VBQ0UsbUJBQUE7VUFBQSxjQUFBO0FDQUY7O0FESUE7RUFDRSx3QkFBQTtVQUFBLHVCQUFBO0FDREYiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy9mb3J3YXJkZXJzL2ZvcndhcmRlcnMuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBbGlnbiBhY3Rpb25zIGNvbGx1bW4gdG8gdGhlIHJpZ2h0XG4ubWF0LWNvbHVtbi1hY3Rpb25zIHtcbiAgZmxleDogMCAwIDgwcHhcbn1cblxuLy8gQWxpZ24gYWN0aW9ucyBjb2x1bW4gY2VudGVyXG4ubWF0LWNvbHVtbi1hY3Rpb25zLm1hdC1oZWFkZXItY2VsbCB7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xufSIsIi5tYXQtY29sdW1uLWFjdGlvbnMge1xuICBmbGV4OiAwIDAgODBweDtcbn1cblxuLm1hdC1jb2x1bW4tYWN0aW9ucy5tYXQtaGVhZGVyLWNlbGwge1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn0iXX0= */\"","import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout'\nimport { HttpErrorResponse } from '@angular/common/http'\nimport { Component, OnInit, ViewChild } from '@angular/core'\nimport {\n  MatDialog,\n  MatDialogConfig,\n  MatDialogRef,\n  MatPaginator,\n  MatSnackBar,\n  MatSort,\n  MatTableDataSource,\n} from '@angular/material'\nimport { ActivatedRoute, Router } from '@angular/router'\nimport { Forwarder, ForwardersService } from 'ducky-api-client-angular'\nimport { Observable, Subscription } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { DialogComponent } from 'src/app/shared/components/dialog/dialog.component'\nimport { DialogConfig } from 'src/app/shared/components/dialog/dialog.interfaces'\nimport { ErrorSnackbarService } from 'src/app/shared/components/error-snackbar/error-snackbar.service'\n\nimport { ForwarderDialogComponent } from './components/forwarder-dialog/forwarder-dialog.component'\n\n@Component({\n  selector: 'app-forwarders',\n  templateUrl: './forwarders.component.html',\n  styleUrls: ['./forwarders.component.scss'],\n})\nexport class ForwardersComponent implements OnInit {\n  public constructor(\n    private breakpointObserver: BreakpointObserver,\n    public dialog: MatDialog,\n    private snackBar: MatSnackBar,\n    private errorSnackbarService: ErrorSnackbarService,\n    private readonly forwardersService: ForwardersService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n  ) {}\n\n  public displayedColumns = ['address', 'actions']\n  public dataSource: MatTableDataSource<Forwarder> = new MatTableDataSource()\n  public forwarderSubscription: Subscription\n  public isHandset$: Observable<boolean> = this.breakpointObserver\n    .observe(Breakpoints.Handset)\n    .pipe(map((result): boolean => result.matches))\n\n  @ViewChild(MatSort, { static: false })\n  private set content(sort: MatSort) {\n    // Needed because of the ngif wrapper around the table\n    if (this.dataSource) {\n      this.dataSource.sort = sort\n    }\n  }\n\n  @ViewChild(MatPaginator, { static: true })\n  public paginator: MatPaginator\n\n  public ngOnInit(): void {\n    this.getForwarders()\n\n    this.dataSource.paginator = this.paginator\n\n    this.activatedRoute.params.subscribe((params): void => {\n      if (params['id']) {\n        this.forwarderDialog(params['id'])\n      }\n    })\n  }\n\n  public applyFilter(filterValue: string): void {\n    this.dataSource.filter = filterValue.trim().toLowerCase()\n  }\n\n  public getForwarders(): void {\n    this.forwarderSubscription = this.forwardersService.getForwarders().subscribe(\n      (forwarders): void => {\n        this.dataSource.data = forwarders\n      },\n      error => {\n        this.errorSnackbarService.open(error)\n      },\n    )\n  }\n\n  public forwarderDialog(id?: string): void {\n    const dialogConfig: MatDialogConfig = {}\n    if (id) {\n      dialogConfig.data = { id: id }\n    }\n    const dialog = this.dialog.open(ForwarderDialogComponent, dialogConfig)\n    dialog.afterClosed().subscribe((result): void => {\n      this.router.navigateByUrl('/forwarders/')\n      if (result) {\n        this.getForwarders()\n      }\n    })\n  }\n\n  public removeConfirmDialog(forwarderId: string, address?: string): void {\n    const dialogConfig: DialogConfig = {\n      data: {\n        title: `Remove ${address || forwarderId}`,\n        text: 'Are you sure?',\n        buttons: [\n          {\n            options: {\n              active: false,\n              text: 'NO',\n            },\n          },\n          {\n            options: {\n              active: false,\n              text: 'YES',\n              buttonColor: 'warn',\n              spinnerSize: 18,\n              mode: 'indeterminate',\n            },\n            callback: (dialogRef: MatDialogRef<DialogComponent>): void => {\n              dialogRef.disableClose = true\n              dialogConfig.data.buttons[0].options.disabled = true\n              dialogConfig.data.buttons[1].options.active = true\n\n              this.forwardersService.deleteForwarder(forwarderId).subscribe(\n                (): void => {\n                  dialogRef.close()\n                  this.snackBar.open(`${address || forwarderId} has been removed`, undefined, {\n                    panelClass: 'success-snackbar',\n                  })\n                  this.getForwarders()\n                },\n                (error: HttpErrorResponse): void => {\n                  dialogRef.disableClose = false\n                  dialogConfig.data.buttons[0].options.disabled = false\n                  dialogConfig.data.buttons[1].options.active = false\n                  this.errorSnackbarService.open(error)\n                },\n              )\n            },\n          },\n        ],\n      },\n    }\n    this.dialog.open(DialogComponent, dialogConfig)\n  }\n}\n","export default \".layout-center {\\n  background-color: #00BCD4;\\n  height: 100vh;\\n}\\n\\nmat-card {\\n  box-sizing: border-box;\\n  width: 400px;\\n  padding: 30px;\\n}\\n\\nmat-card.is-handset {\\n  width: 100vw;\\n  height: 100vh;\\n}\\n\\nmat-card-title {\\n  text-align: center;\\n  margin-bottom: 30px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3JhbWlyby9EZXYvRHVja3lQYW5lbC9zcmMvYXBwL3BhZ2VzL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9wYWdlcy9sb2dpbi9sb2dpbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLHlCQUFBO0VBQ0EsYUFBQTtBQ0NGOztBREVBO0VBQ0Usc0JBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtBQ0NGOztBRENFO0VBQ0UsWUFBQTtFQUNBLGFBQUE7QUNDSjs7QURHQTtFQUNFLGtCQUFBO0VBQ0EsbUJBQUE7QUNBRiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmxheW91dC1jZW50ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBCQ0Q0O1xuICBoZWlnaHQ6IDEwMHZoO1xufVxuXG5tYXQtY2FyZCB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHdpZHRoOiA0MDBweDtcbiAgcGFkZGluZzogMzBweDtcblxuICAmLmlzLWhhbmRzZXQge1xuICAgIHdpZHRoOiAxMDB2dztcbiAgICBoZWlnaHQ6IDEwMHZoO1xuICB9XG59XG5cbm1hdC1jYXJkLXRpdGxlIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBtYXJnaW4tYm90dG9tOiAzMHB4O1xufVxuIiwiLmxheW91dC1jZW50ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDBCQ0Q0O1xuICBoZWlnaHQ6IDEwMHZoO1xufVxuXG5tYXQtY2FyZCB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHdpZHRoOiA0MDBweDtcbiAgcGFkZGluZzogMzBweDtcbn1cbm1hdC1jYXJkLmlzLWhhbmRzZXQge1xuICB3aWR0aDogMTAwdnc7XG4gIGhlaWdodDogMTAwdmg7XG59XG5cbm1hdC1jYXJkLXRpdGxlIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBtYXJnaW4tYm90dG9tOiAzMHB4O1xufSJdfQ== */\"","import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout'\nimport { Component, OnInit } from '@angular/core'\nimport { FormControl, FormGroup } from '@angular/forms'\nimport { Router } from '@angular/router'\nimport { AccessToken, AuthenticationService } from 'ducky-api-client-angular'\nimport { MatProgressButtonOptions } from 'mat-progress-buttons'\nimport { Observable } from 'rxjs'\nimport { map } from 'rxjs/operators'\nimport { ErrorSnackbarService } from 'src/app/shared/components/error-snackbar/error-snackbar.service'\n\nimport { DomainsService } from '../domains/domains.service'\nimport { ProfileService } from '../profile/profile.service'\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n  public constructor(\n    private breakpointObserver: BreakpointObserver,\n    private authenticationService: AuthenticationService,\n    private profileService: ProfileService,\n    private errorSnackbarService: ErrorSnackbarService,\n    private domainsService: DomainsService,\n    private router: Router,\n  ) {}\n\n  public isHandset$: Observable<boolean> = this.breakpointObserver\n    .observe(Breakpoints.Handset)\n    .pipe(map((result): boolean => result.matches))\n\n  public loginForm: FormGroup = new FormGroup({\n    username: new FormControl(''),\n    password: new FormControl(''),\n  })\n\n  public loginButtonConfig: MatProgressButtonOptions = {\n    active: false,\n    text: 'LOGIN',\n    disabled: true,\n    raised: true,\n    buttonColor: 'primary',\n    spinnerColor: 'accent',\n    spinnerSize: 18,\n    mode: 'indeterminate',\n  }\n\n  public ngOnInit(): void {\n    this.loginForm.valueChanges.subscribe((): void => {\n      this.loginButtonConfig.disabled = this.loginForm.invalid\n    })\n  }\n\n  public login(): void {\n    if (this.loginForm.valid) {\n      this.loginButtonConfig.active = true\n      this.authenticationService\n        .getAccessToken({\n          username: this.loginForm.value.username,\n          password: this.loginForm.value.password,\n        })\n        .subscribe(\n          (accessToken: AccessToken): void => {\n            localStorage.setItem('access_token', accessToken.accessToken)\n            this.authenticationService.configuration.accessToken = accessToken.accessToken\n\n            this.profileService.user.username = this.loginForm.value.username\n            this.profileService.getUserInfo()\n            this.domainsService.getDomains()\n\n            this.router.navigateByUrl('/accounts')\n          },\n          (error): void => {\n            this.loginButtonConfig.active = false\n            if (error.error.error === 'Unauthorized') {\n              this.errorSnackbarService.open('Invalid username or password')\n            } else {\n              this.errorSnackbarService.open(error)\n            }\n          },\n        )\n    }\n  }\n}\n","export default \".usage-text {\\n  white-space: nowrap;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3JhbWlyby9EZXYvRHVja3lQYW5lbC9zcmMvYXBwL3BhZ2VzL3Byb2ZpbGUvcHJvZmlsZS5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvcGFnZXMvcHJvZmlsZS9wcm9maWxlLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsbUJBQUE7QUNDRiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3Byb2ZpbGUvcHJvZmlsZS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi51c2FnZS10ZXh0IHtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbn0iLCIudXNhZ2UtdGV4dCB7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG59Il19 */\"","import { HttpErrorResponse } from '@angular/common/http'\nimport { Component, OnInit } from '@angular/core'\nimport { FormControl, FormGroup } from '@angular/forms'\nimport { MatDialog, MatDialogRef, MatSnackBar } from '@angular/material'\nimport { Router } from '@angular/router'\nimport {\n  AuthenticationService,\n  EmailAccountsService,\n  ProfileService as ApiProfileService,\n} from 'ducky-api-client-angular'\nimport { MatProgressButtonOptions } from 'mat-progress-buttons'\nimport { Subscription } from 'rxjs'\nimport { DialogComponent } from 'src/app/shared/components/dialog/dialog.component'\nimport { DialogConfig } from 'src/app/shared/components/dialog/dialog.interfaces'\nimport { ErrorSnackbarService } from 'src/app/shared/components/error-snackbar/error-snackbar.service'\nimport { formatBytes } from 'src/app/shared/functions/formatBytes.function'\nimport { IsAsciiValidator } from 'src/app/shared/validators/ascii-validator.directive'\nimport { notContainsValidator } from 'src/app/shared/validators/not-contains-validator.directive'\n\nimport { ProfileService } from './profile.service'\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss'],\n})\nexport class ProfileComponent implements OnInit {\n  public constructor(\n    public apiProfileService: ApiProfileService,\n    public profileService: ProfileService,\n    private authenticationService: AuthenticationService,\n    private emailAccountsService: EmailAccountsService,\n    private snackBar: MatSnackBar,\n    private errorSnackbarService: ErrorSnackbarService,\n    private router: Router,\n    public dialog: MatDialog,\n  ) {}\n  public usage = {\n    bytes: 0,\n    formatted: 'Usage',\n  }\n  public quota = {\n    bytes: 0,\n    formatted: 'Quota',\n  }\n  public calculateStorageSubscription: Subscription\n\n  public loginDetailsForm: FormGroup = new FormGroup({\n    username: new FormControl(this.profileService.user.username, [IsAsciiValidator(), notContainsValidator(' ')]),\n    password: new FormControl(null),\n  })\n\n  public loginDetailsButtonConfig: MatProgressButtonOptions = {\n    active: false,\n    text: 'CHANGE',\n    disabled: true,\n    raised: true,\n    buttonColor: 'primary',\n    spinnerColor: 'accent',\n    spinnerSize: 18,\n    mode: 'indeterminate',\n  }\n\n  public ngOnInit(): void {\n    this.calculateStorage()\n    this.profileService.userInfoSubscription.add(() => {\n      // Only set username and quota if the userinfo request has finished\n      this.loginDetailsForm.controls['username'].setValue(this.profileService.user.username)\n      this.quota.bytes = this.profileService.user.quota\n      this.quota.formatted = formatBytes(this.quota.bytes)\n    })\n    this.loginDetailsForm.valueChanges.subscribe((): void => {\n      this.loginDetailsButtonConfig.disabled = this.loginDetailsForm.invalid\n    })\n  }\n\n  public calculateStorage(): void {\n    this.usage.bytes = 0\n    this.calculateStorageSubscription = this.emailAccountsService.getAccounts().subscribe(\n      (accounts): void => {\n        for (const account of accounts) {\n          this.usage.bytes += account.quota.used\n        }\n        this.usage.formatted = formatBytes(this.usage.bytes)\n      },\n      error => {\n        this.errorSnackbarService.open(error)\n      },\n    )\n  }\n\n  public changeLoginDetails(): void {\n    if (this.loginDetailsForm.valid) {\n      this.loginDetailsButtonConfig.active = true\n      this.apiProfileService\n        .updateMe({\n          username: this.loginDetailsForm.value.username,\n          password: this.loginDetailsForm.value.password,\n        })\n        .subscribe(\n          (): void => {\n            this.loginDetailsButtonConfig.active = false\n            this.snackBar.open(`Username/Password successfully updated`, undefined, {\n              panelClass: 'success-snackbar',\n            })\n            this.profileService.getUserInfo()\n          },\n          (error): void => {\n            this.loginDetailsButtonConfig.active = false\n            this.errorSnackbarService.open(error)\n          },\n        )\n    }\n  }\n\n  public logout(): void {\n    localStorage.removeItem('access_token')\n    delete this.authenticationService.configuration.accessToken\n    this.snackBar.open('Logged out successfully', undefined, {\n      panelClass: 'success-snackbar',\n    })\n    this.router.navigateByUrl('/login')\n  }\n\n  public logoutAllDialog(): void {\n    const dialogConfig: DialogConfig = {\n      data: {\n        title: 'Log out from all devices',\n        text: 'Are you sure? This will also log you out on this device.',\n        buttons: [\n          {\n            options: {\n              active: false,\n              text: 'NO',\n            },\n          },\n          {\n            options: {\n              active: false,\n              text: 'YES',\n              buttonColor: 'warn',\n              spinnerSize: 18,\n              mode: 'indeterminate',\n            },\n            callback: (dialogRef: MatDialogRef<DialogComponent>): void => {\n              dialogRef.disableClose = true\n              dialogConfig.data.buttons[0].options.disabled = true\n              dialogConfig.data.buttons[1].options.active = true\n\n              this.authenticationService.revokeAllAccessTokens().subscribe(\n                (): void => {\n                  dialogRef.close()\n                  this.logout()\n                },\n                (error: HttpErrorResponse): void => {\n                  dialogRef.disableClose = false\n                  dialogConfig.data.buttons[0].options.disabled = false\n                  dialogConfig.data.buttons[1].options.active = false\n                  this.errorSnackbarService.open(error)\n                },\n              )\n            },\n          },\n        ],\n      },\n    }\n    this.dialog.open(DialogComponent, dialogConfig)\n  }\n}\n","import { Injectable } from '@angular/core'\nimport { ProfileService as ApiProfileService, User } from 'ducky-api-client-angular'\nimport { Subscription } from 'rxjs'\nimport { ErrorSnackbarService } from 'src/app/shared/components/error-snackbar/error-snackbar.service'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProfileService {\n  public constructor(\n    private apiProfileService: ApiProfileService,\n    private errorSnackbarService: ErrorSnackbarService,\n  ) {}\n\n  public user: User = {} as User\n  public userInfoSubscription: Subscription\n\n  public getUserInfo(): void {\n    this.userInfoSubscription = this.apiProfileService.getMe().subscribe(\n      (user): void => {\n        this.user = user\n      },\n      error => {\n        this.errorSnackbarService.open(error)\n      },\n    )\n  }\n}\n","export default \"mat-dialog-content {\\n  max-width: 350px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3JhbWlyby9EZXYvRHVja3lQYW5lbC9zcmMvYXBwL3NoYXJlZC9jb21wb25lbnRzL2RpYWxvZy9kaWFsb2cuY29tcG9uZW50LnNjc3MiLCJzcmMvYXBwL3NoYXJlZC9jb21wb25lbnRzL2RpYWxvZy9kaWFsb2cuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxnQkFBQTtBQ0NGIiwiZmlsZSI6InNyYy9hcHAvc2hhcmVkL2NvbXBvbmVudHMvZGlhbG9nL2RpYWxvZy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIm1hdC1kaWFsb2ctY29udGVudCB7XG4gIG1heC13aWR0aDogMzUwcHg7XG59XG4iLCJtYXQtZGlhbG9nLWNvbnRlbnQge1xuICBtYXgtd2lkdGg6IDM1MHB4O1xufSJdfQ== */\"","import { Component, Inject } from '@angular/core'\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material'\n\n@Component({\n  selector: 'custom-dialog',\n  templateUrl: 'dialog.component.html',\n  styleUrls: ['dialog.component.scss'],\n})\nexport class DialogComponent {\n  public constructor(public dialogRef: MatDialogRef<DialogComponent>, @Inject(MAT_DIALOG_DATA) public data) {}\n}\n","export default \".action {\\n  margin: -8px -8px -8px -8px;\\n}\\n\\n.flex-container {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3JhbWlyby9EZXYvRHVja3lQYW5lbC9zcmMvYXBwL3NoYXJlZC9jb21wb25lbnRzL2Vycm9yLXNuYWNrYmFyL2Vycm9yLXNuYWNrYmFyLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9zaGFyZWQvY29tcG9uZW50cy9lcnJvci1zbmFja2Jhci9lcnJvci1zbmFja2Jhci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLDJCQUFBO0FDQ0Y7O0FERUE7RUFDRSxXQUFBO0FDQ0YiLCJmaWxlIjoic3JjL2FwcC9zaGFyZWQvY29tcG9uZW50cy9lcnJvci1zbmFja2Jhci9lcnJvci1zbmFja2Jhci5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5hY3Rpb24ge1xuICBtYXJnaW46IC04cHggLThweCAtOHB4IC04cHg7XG59XG5cbi5mbGV4LWNvbnRhaW5lciB7XG4gIHdpZHRoOiAxMDAlXG59IiwiLmFjdGlvbiB7XG4gIG1hcmdpbjogLThweCAtOHB4IC04cHggLThweDtcbn1cblxuLmZsZXgtY29udGFpbmVyIHtcbiAgd2lkdGg6IDEwMCU7XG59Il19 */\"","import { HttpErrorResponse } from '@angular/common/http'\nimport { Component, Inject, OnInit } from '@angular/core'\nimport { MAT_SNACK_BAR_DATA, MatDialog, MatSnackBarRef } from '@angular/material'\nimport { Router } from '@angular/router'\n\nimport { DialogComponent } from '../dialog/dialog.component'\nimport { DialogConfig } from '../dialog/dialog.interfaces'\n\n@Component({\n  selector: 'app-error-snackbar',\n  templateUrl: './error-snackbar.component.html',\n  styleUrls: ['./error-snackbar.component.scss'],\n})\nexport class ErrorSnackbarComponent implements OnInit {\n  public constructor(\n    public snackBarRef: MatSnackBarRef<ErrorSnackbarComponent>,\n    private dialog: MatDialog,\n    private router: Router,\n    @Inject(MAT_SNACK_BAR_DATA) public data,\n  ) {}\n\n  public message: string\n  public errorDetails: string\n\n  public ngOnInit(): void {\n    if (this.data instanceof HttpErrorResponse) {\n      if (this.data.error.error === 'Unauthorized') {\n        this.message = 'Session expired, please login.'\n        this.router.navigateByUrl('/login')\n      } else if (this.data.error.error === 'ValidationError') {\n        this.message = 'Invalid input'\n        this.errorDetails = JSON.stringify(this.data.error.message)\n      } else if (this.data.error.message) {\n        this.message = this.data.error.message\n      } else {\n        this.message = 'Unknown error. 🤷‍'\n        this.errorDetails = JSON.stringify(this.data.message)\n      }\n    } else {\n      this.message = this.data\n    }\n  }\n\n  public showDetails(): void {\n    const dialogConfig: DialogConfig = {\n      data: {\n        title: 'Error details',\n        text: this.errorDetails,\n        buttons: [\n          {\n            options: {\n              active: false,\n              text: 'OK',\n            },\n          },\n        ],\n      },\n    }\n    this.dialog.open(DialogComponent, dialogConfig)\n  }\n}\n","import { Injectable, NgZone } from '@angular/core'\nimport { MatSnackBar } from '@angular/material'\n\nimport { ErrorSnackbarComponent } from './error-snackbar.component'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ErrorSnackbarService {\n  constructor(private snackBar: MatSnackBar, private zone: NgZone) {}\n\n  public open(error): void {\n    this.zone.run(() => {\n      this.snackBar.openFromComponent(ErrorSnackbarComponent, {\n        data: error,\n        panelClass: ['error-snackbar'],\n      })\n    })\n  }\n}\n","export default \"button {\\n  position: fixed;\\n  right: 30px;\\n  bottom: 30px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3JhbWlyby9EZXYvRHVja3lQYW5lbC9zcmMvYXBwL3NoYXJlZC9jb21wb25lbnRzL2ZhYi1idXR0b24vZmFiLWJ1dHRvbi5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvc2hhcmVkL2NvbXBvbmVudHMvZmFiLWJ1dHRvbi9mYWItYnV0dG9uLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZUFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0FDQ0YiLCJmaWxlIjoic3JjL2FwcC9zaGFyZWQvY29tcG9uZW50cy9mYWItYnV0dG9uL2ZhYi1idXR0b24uY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJidXR0b24ge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHJpZ2h0OiAzMHB4O1xuICBib3R0b206IDMwcHg7XG59XG4iLCJidXR0b24ge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHJpZ2h0OiAzMHB4O1xuICBib3R0b206IDMwcHg7XG59Il19 */\"","import { Component, Input } from '@angular/core'\n\n@Component({\n  selector: 'app-fab-button',\n  templateUrl: './fab-button.component.html',\n  styleUrls: ['./fab-button.component.scss'],\n})\nexport class FabButtonComponent {\n  @Input() public icon: string\n}\n","export function formatBytes(bytes: number, decimals = 1): string {\r\n  if (bytes == 0) return '0 Bytes'\r\n  const k = 1024,\r\n    sizes = ['Bytes', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'],\r\n    i = Math.floor(Math.log(bytes) / Math.log(k))\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(decimals)) + ' ' + sizes[i]\r\n}\r\n","import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms'\nimport { Validator } from 'class-validator'\n\n/**\n * @description Function that validates if string is empty, email address, smtp address, or http address\n */\nexport function AddressUsernameValidator(): ValidatorFn {\n  const validator = new Validator()\n  return (control: AbstractControl): ValidationErrors | null => {\n    const completeAddress = `${control.value}@example.com`\n    if (validator.isEmail(completeAddress)) {\n      // string is valid\n      return null\n    } else {\n      // string is not an email or an url with a valid protocol\n      return {\n        AddressUsername: {\n          valid: false,\n        },\n      }\n    }\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms'\nimport { Validator } from 'class-validator'\n\n/**\n * @description Function that validates if string only ascii characters\n */\nexport function IsAsciiValidator(): ValidatorFn {\n  const validator = new Validator()\n  return (control: AbstractControl): ValidationErrors | null => {\n    if (validator.isAscii(control.value)) {\n      // string is valid\n      return null\n    } else {\n      // string is not ascii\n      return {\n        isAscii: {\n          valid: false,\n        },\n      }\n    }\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms'\nimport { Validator } from 'class-validator'\n\n/**\n * @description Function that validates if string is empty, email address, smtp address, or http address\n */\nexport function forwardingTargetValidator(): ValidatorFn {\n  const validator = new Validator()\n  return (control: AbstractControl): ValidationErrors | null => {\n    if (\n      validator.isEmpty(control.value) ||\n      validator.isEmail(control.value) ||\n      validator.isURL(control.value, {\n        protocols: ['http', 'https', 'smtp', 'smtps'],\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        require_protocol: true,\n      })\n    ) {\n      // string is valid\n      return null\n    } else {\n      // string is not an email or an url with a valid protocol\n      return {\n        forwardingTarget: {\n          valid: false,\n        },\n      }\n    }\n  }\n}\n","import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms'\nimport { Validator } from 'class-validator'\n\n/**\n * @description Function that validates if string does not contain the given seed\n */\nexport function notContainsValidator(seed: string): ValidatorFn {\n  const validator = new Validator()\n  return (control: AbstractControl): ValidationErrors | null => {\n    if (validator.notContains(control.value, seed)) {\n      // string is valid\n      return null\n    } else {\n      // string is not ascii\n      return {\n        notContains: {\n          valid: false,\n        },\n      }\n    }\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n}\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import 'hammerjs'\n\nimport { enableProdMode } from '@angular/core'\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic'\n\nimport { AppModule } from './app/app.module'\nimport { environment } from './environments/environment'\n\nif (environment.production) {\n  enableProdMode()\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err): void => alert(err))\n"],"sourceRoot":"webpack:///","file":"main-es5.js"}